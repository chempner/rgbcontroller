

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Jul 01 18:06:23 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F16Q40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    31                           	dabs	1,0x1500,2,_bufferRAM
    32   000000                     
    33                           ; Version 2.30
    34                           ; Generated 20/08/2020 GMT
    35                           ; 
    36                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution. Publication is not required when
    50                           ;        this file is used in an embedded application.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F16Q40 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68   000000                     _PORTBbits	set	1231
    69   000000                     _NVMLOCK	set	66
    70   000000                     _OSCTUNE	set	176
    71   000000                     _OSCFRQ	set	177
    72   000000                     _OSCEN	set	179
    73   000000                     _ADERRL	set	989
    74   000000                     _ADERRH	set	990
    75   000000                     _ADPREVL	set	1000
    76   000000                     _ADPREVH	set	1001
    77   000000                     _ADFLTRL	set	993
    78   000000                     _ADFLTRH	set	994
    79   000000                     _ADACCL	set	995
    80   000000                     _ADACCH	set	996
    81   000000                     _ADCNT	set	998
    82   000000                     _ADRESL	set	1002
    83   000000                     _ADRESH	set	1003
    84   000000                     _ADCON0	set	1011
    85   000000                     _ADCON1	set	1012
    86   000000                     _ADPREH	set	1010
    87   000000                     _ADPREL	set	1009
    88   000000                     _ADCAP	set	1008
    89   000000                     _ADACQH	set	1007
    90   000000                     _ADPCH	set	1004
    91   000000                     _ADRPT	set	999
    92   000000                     _ADACCU	set	997
    93   000000                     _ADSTPTH	set	992
    94   000000                     _ADSTPTL	set	991
    95   000000                     _ADUTHH	set	988
    96   000000                     _ADUTHL	set	987
    97   000000                     _ADLTHH	set	986
    98                           
    99 ;;
   100 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   101 ;;
   102 ;; *************** function _main *****************
   103 ;; Defined at:
   104 ;;		line 42 in file "main.c"
   105 ;; Parameters:    Size  Location     Type
   106 ;;		None
   107 ;; Auto vars:     Size  Location     Type
   108 ;;  timeout10s      2   56[COMRAM] unsigned short 
   109 ;;  timeout5sPre    2   54[COMRAM] unsigned short 
   110 ;;  timeout5sPre    2   52[COMRAM] unsigned short 
   111 ;;  timeout5sPre    2   50[COMRAM] unsigned short 
   112 ;;  timeout5sPre    2   48[COMRAM] unsigned short 
   113 ;;  timeout5s       2   46[COMRAM] unsigned short 
   114 ;;  state           1   78[COMRAM] enum E13368
   115 ;;  taster4Flag     1    0        unsigned char 
   116 ;;  taster3Flag     1    0        unsigned char 
   117 ;;  taster2Flag     1    0        unsigned char 
   118 ;;  taster1Flag     1    0        unsigned char 
   119 ;;  whiteMode4      1    0        unsigned char 
   120 ;;  whiteMode3      1    0        unsigned char 
   121 ;;  whiteMode2      1    0        unsigned char 
   122 ;;  whiteMode1      1    0        unsigned char 
   123 ;;  white           1    0        unsigned char 
   124 ;;  timeout250ms    1   77[COMRAM] unsigned char 
   125 ;;  timeout500ms    1   76[COMRAM] unsigned char 
   126 ;;  timeout100ms    1   75[COMRAM] unsigned char 
   127 ;;  whiteAdj        1   74[COMRAM] _Bool 
   128 ;;  blueAdj         1   73[COMRAM] _Bool 
   129 ;;  greenAdj        1    0        _Bool 
   130 ;;  redAdj          1    0        _Bool 
   131 ;;  led4StateBli    1    0        _Bool 
   132 ;;  led3StateBli    1    0        _Bool 
   133 ;;  led2StateBli    1    0        _Bool 
   134 ;;  led1StateBli    1    0        _Bool 
   135 ;;  led4Blink       1    0        _Bool 
   136 ;;  led3Blink       1    0        _Bool 
   137 ;;  led2Blink       1    0        _Bool 
   138 ;;  led1Blink       1    0        _Bool 
   139 ;;  blueMode4       1   72[COMRAM] unsigned char 
   140 ;;  greenMode4      1   71[COMRAM] unsigned char 
   141 ;;  redMode4        1   70[COMRAM] unsigned char 
   142 ;;  blueMode3       1   69[COMRAM] unsigned char 
   143 ;;  greenMode3      1   68[COMRAM] unsigned char 
   144 ;;  redMode3        1   67[COMRAM] unsigned char 
   145 ;;  blueMode2       1   66[COMRAM] unsigned char 
   146 ;;  greenMode2      1   65[COMRAM] unsigned char 
   147 ;;  redMode2        1   64[COMRAM] unsigned char 
   148 ;;  blueMode1       1   63[COMRAM] unsigned char 
   149 ;;  greenMode1      1   62[COMRAM] unsigned char 
   150 ;;  redMode1        1   61[COMRAM] unsigned char 
   151 ;;  blue            1   60[COMRAM] unsigned char 
   152 ;;  green           1   59[COMRAM] unsigned char 
   153 ;;  red             1   58[COMRAM] unsigned char 
   154 ;;  timeout1s       1    0        unsigned char 
   155 ;; Return value:  Size  Location     Type
   156 ;;                  1    wreg      void 
   157 ;; Registers used:
   158 ;;		wreg, status,2, status,0, cstack
   159 ;; Tracked objects:
   160 ;;		On entry : 0/0
   161 ;;		On exit  : 0/0
   162 ;;		Unchanged: 0/0
   163 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14  BANK15  BANK1
      +6  BANK17  BANK18  BANK19  BANK20  BANK21
   164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   165 ;;      Locals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   167 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   168 ;;Total ram usage:       33 bytes
   169 ;; Hardware stack levels required when called: 4
   170 ;; This function calls:
   171 ;;		_ADCC_DischargeSampleCapacitor
   172 ;;		_ADCC_GetSingleConversion
   173 ;;		_DATAEE_ReadByte
   174 ;;		_LED_WriteFull
   175 ;;		_LOOPDELAY_Init
   176 ;;		_SYSTEM_Initialize
   177 ;;		_map
   178 ;; This function is called by:
   179 ;;		Startup code after reset
   180 ;; This function uses a non-reentrant model
   181 ;;
   182                           
   183                           	psect	text0
   184   00FB48                     __ptext0:
   185                           	callstack 0
   186   000000                     _ADCON1bits	set	1012
   187   000000                     _ADSTATbits	set	1015
   188   000000                     _ADCON2bits	set	1013
   189   000000                     _ADCON3bits	set	1014
   190   000000                     _ADCON0bits	set	1011
   191   000000                     _LATBbits	set	1215
   192   000000                     _LATAbits	set	1214
   193   000000                     _LATCbits	set	1216
   194   000000                     _NVMCON0bits	set	64
   195   000000                     _NVMCON1bits	set	65
   196   000000                     _NVMADRL	set	67
   197   000000                     _NVMADRH	set	68
   198   000000                     _NVMADRU	set	69
   199   000000                     _PMD0	set	99
   200   000000                     _ACTCON	set	172
   201   000000                     _OSCCON1	set	173
   202   000000                     _ADLTHL	set	985
   203   000000                     _ANSELA	set	1024
   204   000000                     _ANSELB	set	1032
   205   000000                     _ANSELC	set	1040
   206   000000                     _LATA	set	1214
   207   000000                     _TRISA	set	1222
   208   000000                     _LATC	set	1216
   209   000000                     _LATB	set	1215
   210   000000                     _PORTAbits	set	1230
   211   000000                     _PORTCbits	set	1232
   212   000000                     _INTCON0bits	set	1238
   213   000000                     _TABLAT	set	1269
   214   000000                     _TBLPTRL	set	1270
   215   000000                     _TBLPTRH	set	1271
   216   000000                     _TBLPTRU	set	1272
   217   000000                     _TRISC	set	1224
   218   000000                     _TRISB	set	1223
   219   000000                     _PIR0bits	set	1203
   220   000000                     _INLVLC	set	1044
   221   000000                     _SLRCONC	set	1043
   222   000000                     _ODCONC	set	1042
   223   000000                     _WPUC	set	1041
   224   000000                     _INLVLB	set	1036
   225   000000                     _SLRCONB	set	1035
   226   000000                     _ODCONB	set	1034
   227   000000                     _WPUB	set	1033
   228   000000                     _INLVLA	set	1028
   229   000000                     _SLRCONA	set	1027
   230   000000                     _ODCONA	set	1026
   231   000000                     _WPUA	set	1025
   232   000000                     _ADACQL	set	1006
   233   000000                     _ADCLK	set	1018
   234   000000                     _ADACT	set	1017
   235   000000                     _ADREF	set	1016
   236   000000                     _ADSTAT	set	1015
   237   000000                     _ADCON3	set	1014
   238   000000                     _ADCON2	set	1013
   239   000000                     _OSCCON3	set	175
   240   000000                     _PMD5	set	104
   241   000000                     _PMD4	set	103
   242   000000                     _PMD3	set	102
   243   000000                     _PMD2	set	101
   244   000000                     _PMD1	set	100
   245   000000                     _NVMDATL	set	70
   246   00FB48                     _main:
   247                           	callstack 124
   248   00FB48                     
   249                           ;main.c: 45:     SYSTEM_Initialize();
   250   00FB48  ECF2  F07A         	call	_SYSTEM_Initialize	;wreg free
   251   00FB4C                     
   252                           ;main.c: 71:     _Bool blueAdj = 0;
   253   00FB4C  0E00               	movlw	0
   254   00FB4E  6E4A               	movwf	main@blueAdj^(0+1280),c
   255   00FB50                     
   256                           ;main.c: 72:     _Bool whiteAdj = 0;
   257   00FB50  0E00               	movlw	0
   258   00FB52  6E4B               	movwf	main@whiteAdj^(0+1280),c
   259   00FB54                     
   260                           ;main.c: 74:     uint8_t timeout1s, timeout100ms = 0;
   261   00FB54  0E00               	movlw	0
   262   00FB56  6E4C               	movwf	main@timeout100ms^(0+1280),c
   263   00FB58                     
   264                           ;main.c: 75:     uint16_t timeout5s = 0;
   265   00FB58  0E00               	movlw	0
   266   00FB5A  6E30               	movwf	(main@timeout5s+1)^(0+1280),c
   267   00FB5C  0E00               	movlw	0
   268   00FB5E  6E2F               	movwf	main@timeout5s^(0+1280),c
   269   00FB60                     
   270                           ;main.c: 76:     uint16_t timeout5sPressed1 = 0;
   271   00FB60  0E00               	movlw	0
   272   00FB62  6E32               	movwf	(main@timeout5sPressed1+1)^(0+1280),c
   273   00FB64  0E00               	movlw	0
   274   00FB66  6E31               	movwf	main@timeout5sPressed1^(0+1280),c
   275   00FB68                     
   276                           ;main.c: 77:     uint16_t timeout5sPressed2 = 0;
   277   00FB68  0E00               	movlw	0
   278   00FB6A  6E34               	movwf	(main@timeout5sPressed2+1)^(0+1280),c
   279   00FB6C  0E00               	movlw	0
   280   00FB6E  6E33               	movwf	main@timeout5sPressed2^(0+1280),c
   281   00FB70                     
   282                           ;main.c: 78:     uint16_t timeout5sPressed3 = 0;
   283   00FB70  0E00               	movlw	0
   284   00FB72  6E36               	movwf	(main@timeout5sPressed3+1)^(0+1280),c
   285   00FB74  0E00               	movlw	0
   286   00FB76  6E35               	movwf	main@timeout5sPressed3^(0+1280),c
   287   00FB78                     
   288                           ;main.c: 79:     uint16_t timeout5sPressed4 = 0;
   289   00FB78  0E00               	movlw	0
   290   00FB7A  6E38               	movwf	(main@timeout5sPressed4+1)^(0+1280),c
   291   00FB7C  0E00               	movlw	0
   292   00FB7E  6E37               	movwf	main@timeout5sPressed4^(0+1280),c
   293   00FB80                     
   294                           ;main.c: 80:     uint16_t timeout10s = 0;
   295   00FB80  0E00               	movlw	0
   296   00FB82  6E3A               	movwf	(main@timeout10s+1)^(0+1280),c
   297   00FB84  0E00               	movlw	0
   298   00FB86  6E39               	movwf	main@timeout10s^(0+1280),c
   299   00FB88                     
   300                           ;main.c: 81:     uint8_t timeout500ms = 0;
   301   00FB88  0E00               	movlw	0
   302   00FB8A  6E4D               	movwf	main@timeout500ms^(0+1280),c
   303   00FB8C                     
   304                           ;main.c: 82:     uint8_t timeout250ms = 0;
   305   00FB8C  0E00               	movlw	0
   306   00FB8E  6E4E               	movwf	main@timeout250ms^(0+1280),c
   307   00FB90                     
   308                           ;main.c: 84:     LATCbits.LATC7 = 0;
   309   00FB90  9EC0               	bcf	192,7,c	;volatile
   310   00FB92                     
   311                           ;main.c: 85:     LATCbits.LATC5 = 0;
   312   00FB92  9AC0               	bcf	192,5,c	;volatile
   313   00FB94                     
   314                           ;main.c: 86:     LATAbits.LATA5 = 0;
   315   00FB94  9ABE               	bcf	190,5,c	;volatile
   316   00FB96                     
   317                           ;main.c: 87:     LATCbits.LATC3 = 0;
   318   00FB96  96C0               	bcf	192,3,c	;volatile
   319   00FB98                     
   320                           ;main.c: 96:     state_t state = MANUAL;
   321   00FB98  0E00               	movlw	0
   322   00FB9A  6E4F               	movwf	main@state^(0+1280),c
   323                           
   324                           ;main.c: 100:     if(DATAEE_ReadByte(3) == 69)
   325   00FB9C  0E00               	movlw	0
   326   00FB9E  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   327   00FBA0  0E03               	movlw	3
   328   00FBA2  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   329   00FBA4  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   330   00FBA8  0A45               	xorlw	69
   331   00FBAA  A4D8               	btfss	status,2,c
   332   00FBAC  EFDA  F07D         	goto	u661
   333   00FBB0  EFDC  F07D         	goto	u660
   334   00FBB4                     u661:
   335   00FBB4  EFF7  F07D         	goto	l355
   336   00FBB8                     u660:
   337   00FBB8                     
   338                           ;main.c: 101:     {;main.c: 102:         redMode1 = DATAEE_ReadByte(11);
   339   00FBB8  0E00               	movlw	0
   340   00FBBA  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   341   00FBBC  0E0B               	movlw	11
   342   00FBBE  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   343   00FBC0  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   344   00FBC4  6E3E               	movwf	main@redMode1^(0+1280),c
   345                           
   346                           ;main.c: 103:         greenMode1 = DATAEE_ReadByte(12);
   347   00FBC6  0E00               	movlw	0
   348   00FBC8  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   349   00FBCA  0E0C               	movlw	12
   350   00FBCC  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   351   00FBCE  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   352   00FBD2  6E3F               	movwf	main@greenMode1^(0+1280),c
   353                           
   354                           ;main.c: 104:         blueMode1 = DATAEE_ReadByte(15);
   355   00FBD4  0E00               	movlw	0
   356   00FBD6  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   357   00FBD8  0E0F               	movlw	15
   358   00FBDA  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   359   00FBDC  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   360   00FBE0  6E40               	movwf	main@blueMode1^(0+1280),c
   361   00FBE2  0E00               	movlw	0
   362   00FBE4  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   363   00FBE6  0E11               	movlw	17
   364   00FBE8  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   365   00FBEA  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   366   00FBEE                     l355:
   367                           
   368                           ;main.c: 108:     if(DATAEE_ReadByte(4) == 69)
   369   00FBEE  0E00               	movlw	0
   370   00FBF0  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   371   00FBF2  0E04               	movlw	4
   372   00FBF4  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   373   00FBF6  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   374   00FBFA  0A45               	xorlw	69
   375   00FBFC  A4D8               	btfss	status,2,c
   376   00FBFE  EF03  F07E         	goto	u671
   377   00FC02  EF05  F07E         	goto	u670
   378   00FC06                     u671:
   379   00FC06  EF20  F07E         	goto	l356
   380   00FC0A                     u670:
   381   00FC0A                     
   382                           ;main.c: 109:     {;main.c: 110:         redMode2 = DATAEE_ReadByte(18);
   383   00FC0A  0E00               	movlw	0
   384   00FC0C  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   385   00FC0E  0E12               	movlw	18
   386   00FC10  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   387   00FC12  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   388   00FC16  6E41               	movwf	main@redMode2^(0+1280),c
   389                           
   390                           ;main.c: 111:         greenMode2 = DATAEE_ReadByte(19);
   391   00FC18  0E00               	movlw	0
   392   00FC1A  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   393   00FC1C  0E13               	movlw	19
   394   00FC1E  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   395   00FC20  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   396   00FC24  6E42               	movwf	main@greenMode2^(0+1280),c
   397                           
   398                           ;main.c: 112:         blueMode2 = DATAEE_ReadByte(20);
   399   00FC26  0E00               	movlw	0
   400   00FC28  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   401   00FC2A  0E14               	movlw	20
   402   00FC2C  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   403   00FC2E  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   404   00FC32  6E43               	movwf	main@blueMode2^(0+1280),c
   405   00FC34  0E00               	movlw	0
   406   00FC36  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   407   00FC38  0E15               	movlw	21
   408   00FC3A  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   409   00FC3C  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   410   00FC40                     l356:
   411                           
   412                           ;main.c: 116:     if(DATAEE_ReadByte(6) == 69)
   413   00FC40  0E00               	movlw	0
   414   00FC42  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   415   00FC44  0E06               	movlw	6
   416   00FC46  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   417   00FC48  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   418   00FC4C  0A45               	xorlw	69
   419   00FC4E  A4D8               	btfss	status,2,c
   420   00FC50  EF2C  F07E         	goto	u681
   421   00FC54  EF2E  F07E         	goto	u680
   422   00FC58                     u681:
   423   00FC58  EF49  F07E         	goto	l357
   424   00FC5C                     u680:
   425   00FC5C                     
   426                           ;main.c: 117:     {;main.c: 118:         redMode3 = DATAEE_ReadByte(22);
   427   00FC5C  0E00               	movlw	0
   428   00FC5E  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   429   00FC60  0E16               	movlw	22
   430   00FC62  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   431   00FC64  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   432   00FC68  6E44               	movwf	main@redMode3^(0+1280),c
   433                           
   434                           ;main.c: 119:         greenMode3 = DATAEE_ReadByte(24);
   435   00FC6A  0E00               	movlw	0
   436   00FC6C  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   437   00FC6E  0E18               	movlw	24
   438   00FC70  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   439   00FC72  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   440   00FC76  6E45               	movwf	main@greenMode3^(0+1280),c
   441                           
   442                           ;main.c: 120:         blueMode3 = DATAEE_ReadByte(25);
   443   00FC78  0E00               	movlw	0
   444   00FC7A  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   445   00FC7C  0E19               	movlw	25
   446   00FC7E  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   447   00FC80  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   448   00FC84  6E46               	movwf	main@blueMode3^(0+1280),c
   449   00FC86  0E00               	movlw	0
   450   00FC88  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   451   00FC8A  0E1B               	movlw	27
   452   00FC8C  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   453   00FC8E  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   454   00FC92                     l357:
   455                           
   456                           ;main.c: 124:     if(DATAEE_ReadByte(8) == 69)
   457   00FC92  0E00               	movlw	0
   458   00FC94  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   459   00FC96  0E08               	movlw	8
   460   00FC98  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   461   00FC9A  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   462   00FC9E  0A45               	xorlw	69
   463   00FCA0  A4D8               	btfss	status,2,c
   464   00FCA2  EF55  F07E         	goto	u691
   465   00FCA6  EF57  F07E         	goto	u690
   466   00FCAA                     u691:
   467   00FCAA  EF72  F07E         	goto	l358
   468   00FCAE                     u690:
   469   00FCAE                     
   470                           ;main.c: 125:     {;main.c: 126:         redMode4 = DATAEE_ReadByte(30);
   471   00FCAE  0E00               	movlw	0
   472   00FCB0  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   473   00FCB2  0E1E               	movlw	30
   474   00FCB4  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   475   00FCB6  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   476   00FCBA  6E47               	movwf	main@redMode4^(0+1280),c
   477                           
   478                           ;main.c: 127:         greenMode4 = DATAEE_ReadByte(31);
   479   00FCBC  0E00               	movlw	0
   480   00FCBE  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   481   00FCC0  0E1F               	movlw	31
   482   00FCC2  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   483   00FCC4  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   484   00FCC8  6E48               	movwf	main@greenMode4^(0+1280),c
   485                           
   486                           ;main.c: 128:         blueMode4 = DATAEE_ReadByte(32);
   487   00FCCA  0E00               	movlw	0
   488   00FCCC  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   489   00FCCE  0E20               	movlw	32
   490   00FCD0  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   491   00FCD2  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   492   00FCD6  6E49               	movwf	main@blueMode4^(0+1280),c
   493   00FCD8  0E00               	movlw	0
   494   00FCDA  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   495   00FCDC  0E22               	movlw	34
   496   00FCDE  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   497   00FCE0  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   498   00FCE4                     l358:
   499                           
   500                           ;main.c: 134:     if(DATAEE_ReadByte(2) == 69)
   501   00FCE4  0E00               	movlw	0
   502   00FCE6  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   503   00FCE8  0E02               	movlw	2
   504   00FCEA  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   505   00FCEC  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   506   00FCF0  0A45               	xorlw	69
   507   00FCF2  A4D8               	btfss	status,2,c
   508   00FCF4  EF7E  F07E         	goto	u701
   509   00FCF8  EF80  F07E         	goto	u700
   510   00FCFC                     u701:
   511   00FCFC  EF29  F07F         	goto	l1930
   512   00FD00                     u700:
   513   00FD00                     
   514                           ;main.c: 135:     {;main.c: 136:         state = DATAEE_ReadByte(36);
   515   00FD00  0E00               	movlw	0
   516   00FD02  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   517   00FD04  0E24               	movlw	36
   518   00FD06  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   519   00FD08  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   520   00FD0C  6E4F               	movwf	main@state^(0+1280),c
   521   00FD0E                     
   522                           ;main.c: 138:         if(state == 1 && (DATAEE_ReadByte(3) == 69))
   523   00FD0E  044F               	decf	main@state^(0+1280),w,c
   524   00FD10  A4D8               	btfss	status,2,c
   525   00FD12  EF8D  F07E         	goto	u711
   526   00FD16  EF8F  F07E         	goto	u710
   527   00FD1A                     u711:
   528   00FD1A  EFA4  F07E         	goto	l1890
   529   00FD1E                     u710:
   530   00FD1E  0E00               	movlw	0
   531   00FD20  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   532   00FD22  0E03               	movlw	3
   533   00FD24  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   534   00FD26  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   535   00FD2A  0A45               	xorlw	69
   536   00FD2C  A4D8               	btfss	status,2,c
   537   00FD2E  EF9B  F07E         	goto	u721
   538   00FD32  EF9D  F07E         	goto	u720
   539   00FD36                     u721:
   540   00FD36  EFA4  F07E         	goto	l1890
   541   00FD3A                     u720:
   542   00FD3A                     
   543                           ;main.c: 139:         {;main.c: 140:             LATCbits.LATC7 = 1;
   544   00FD3A  8EC0               	bsf	192,7,c	;volatile
   545   00FD3C                     
   546                           ;main.c: 141:             _delay((unsigned long)((50)*(64000000/4000000.0)));
   547   00FD3C  0EA0               	movlw	160
   548   00FD3E                     u837:
   549   00FD3E  D000               	nop2	
   550   00FD40  2EE8               	decfsz	wreg,f,c
   551   00FD42  D7FD               	bra	u837
   552                           
   553                           ;main.c: 142:         }
   554   00FD44  EFAE  F07E         	goto	l1894
   555   00FD48                     l1890:
   556   00FD48  044F               	decf	main@state^(0+1280),w,c
   557   00FD4A  A4D8               	btfss	status,2,c
   558   00FD4C  EFAA  F07E         	goto	u731
   559   00FD50  EFAC  F07E         	goto	u730
   560   00FD54                     u731:
   561   00FD54  EFAE  F07E         	goto	l1894
   562   00FD58                     u730:
   563   00FD58                     
   564                           ;main.c: 144:         {;main.c: 145:             state = MANUAL;
   565   00FD58  0E00               	movlw	0
   566   00FD5A  6E4F               	movwf	main@state^(0+1280),c
   567   00FD5C                     l1894:
   568                           
   569                           ;main.c: 148:         if(state == 2 && (DATAEE_ReadByte(4) == 69))
   570   00FD5C  0E02               	movlw	2
   571   00FD5E  184F               	xorwf	main@state^(0+1280),w,c
   572   00FD60  A4D8               	btfss	status,2,c
   573   00FD62  EFB5  F07E         	goto	u741
   574   00FD66  EFB7  F07E         	goto	u740
   575   00FD6A                     u741:
   576   00FD6A  EFCC  F07E         	goto	l1902
   577   00FD6E                     u740:
   578   00FD6E  0E00               	movlw	0
   579   00FD70  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   580   00FD72  0E04               	movlw	4
   581   00FD74  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   582   00FD76  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   583   00FD7A  0A45               	xorlw	69
   584   00FD7C  A4D8               	btfss	status,2,c
   585   00FD7E  EFC3  F07E         	goto	u751
   586   00FD82  EFC5  F07E         	goto	u750
   587   00FD86                     u751:
   588   00FD86  EFCC  F07E         	goto	l1902
   589   00FD8A                     u750:
   590   00FD8A                     
   591                           ;main.c: 149:         {;main.c: 150:             LATCbits.LATC5 = 1;
   592   00FD8A  8AC0               	bsf	192,5,c	;volatile
   593   00FD8C                     
   594                           ;main.c: 151:             _delay((unsigned long)((50)*(64000000/4000000.0)));
   595   00FD8C  0EA0               	movlw	160
   596   00FD8E                     u847:
   597   00FD8E  D000               	nop2	
   598   00FD90  2EE8               	decfsz	wreg,f,c
   599   00FD92  D7FD               	bra	u847
   600                           
   601                           ;main.c: 152:         }
   602   00FD94  EFD7  F07E         	goto	l1906
   603   00FD98                     l1902:
   604   00FD98  0E02               	movlw	2
   605   00FD9A  184F               	xorwf	main@state^(0+1280),w,c
   606   00FD9C  A4D8               	btfss	status,2,c
   607   00FD9E  EFD3  F07E         	goto	u761
   608   00FDA2  EFD5  F07E         	goto	u760
   609   00FDA6                     u761:
   610   00FDA6  EFD7  F07E         	goto	l1906
   611   00FDAA                     u760:
   612   00FDAA                     
   613                           ;main.c: 154:         {;main.c: 155:             state = MANUAL;
   614   00FDAA  0E00               	movlw	0
   615   00FDAC  6E4F               	movwf	main@state^(0+1280),c
   616   00FDAE                     l1906:
   617                           
   618                           ;main.c: 158:         if(state == 3 && (DATAEE_ReadByte(6) == 69))
   619   00FDAE  0E03               	movlw	3
   620   00FDB0  184F               	xorwf	main@state^(0+1280),w,c
   621   00FDB2  A4D8               	btfss	status,2,c
   622   00FDB4  EFDE  F07E         	goto	u771
   623   00FDB8  EFE0  F07E         	goto	u770
   624   00FDBC                     u771:
   625   00FDBC  EFF5  F07E         	goto	l1914
   626   00FDC0                     u770:
   627   00FDC0  0E00               	movlw	0
   628   00FDC2  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   629   00FDC4  0E06               	movlw	6
   630   00FDC6  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   631   00FDC8  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   632   00FDCC  0A45               	xorlw	69
   633   00FDCE  A4D8               	btfss	status,2,c
   634   00FDD0  EFEC  F07E         	goto	u781
   635   00FDD4  EFEE  F07E         	goto	u780
   636   00FDD8                     u781:
   637   00FDD8  EFF5  F07E         	goto	l1914
   638   00FDDC                     u780:
   639   00FDDC                     
   640                           ;main.c: 159:         {;main.c: 160:             LATAbits.LATA5 = 1;
   641   00FDDC  8ABE               	bsf	190,5,c	;volatile
   642   00FDDE                     
   643                           ;main.c: 161:             _delay((unsigned long)((50)*(64000000/4000000.0)));
   644   00FDDE  0EA0               	movlw	160
   645   00FDE0                     u857:
   646   00FDE0  D000               	nop2	
   647   00FDE2  2EE8               	decfsz	wreg,f,c
   648   00FDE4  D7FD               	bra	u857
   649                           
   650                           ;main.c: 162:         }
   651   00FDE6  EF00  F07F         	goto	l1918
   652   00FDEA                     l1914:
   653   00FDEA  0E03               	movlw	3
   654   00FDEC  184F               	xorwf	main@state^(0+1280),w,c
   655   00FDEE  A4D8               	btfss	status,2,c
   656   00FDF0  EFFC  F07E         	goto	u791
   657   00FDF4  EFFE  F07E         	goto	u790
   658   00FDF8                     u791:
   659   00FDF8  EF00  F07F         	goto	l1918
   660   00FDFC                     u790:
   661   00FDFC                     
   662                           ;main.c: 164:         {;main.c: 165:             state = MANUAL;
   663   00FDFC  0E00               	movlw	0
   664   00FDFE  6E4F               	movwf	main@state^(0+1280),c
   665   00FE00                     l1918:
   666                           
   667                           ;main.c: 168:         if(state == 4 && (DATAEE_ReadByte(8) == 69))
   668   00FE00  0E04               	movlw	4
   669   00FE02  184F               	xorwf	main@state^(0+1280),w,c
   670   00FE04  A4D8               	btfss	status,2,c
   671   00FE06  EF07  F07F         	goto	u801
   672   00FE0A  EF09  F07F         	goto	u800
   673   00FE0E                     u801:
   674   00FE0E  EF1E  F07F         	goto	l1926
   675   00FE12                     u800:
   676   00FE12  0E00               	movlw	0
   677   00FE14  6E02               	movwf	(DATAEE_ReadByte@bAdd+1)^(0+1280),c
   678   00FE16  0E08               	movlw	8
   679   00FE18  6E01               	movwf	DATAEE_ReadByte@bAdd^(0+1280),c
   680   00FE1A  EC06  F07B         	call	_DATAEE_ReadByte	;wreg free
   681   00FE1E  0A45               	xorlw	69
   682   00FE20  A4D8               	btfss	status,2,c
   683   00FE22  EF15  F07F         	goto	u811
   684   00FE26  EF17  F07F         	goto	u810
   685   00FE2A                     u811:
   686   00FE2A  EF1E  F07F         	goto	l1926
   687   00FE2E                     u810:
   688   00FE2E                     
   689                           ;main.c: 169:         {;main.c: 170:             LATCbits.LATC3 = 1;
   690   00FE2E  86C0               	bsf	192,3,c	;volatile
   691   00FE30                     
   692                           ;main.c: 171:             _delay((unsigned long)((50)*(64000000/4000000.0)));
   693   00FE30  0EA0               	movlw	160
   694   00FE32                     u867:
   695   00FE32  D000               	nop2	
   696   00FE34  2EE8               	decfsz	wreg,f,c
   697   00FE36  D7FD               	bra	u867
   698                           
   699                           ;main.c: 172:         }
   700   00FE38  EF29  F07F         	goto	l1930
   701   00FE3C                     l1926:
   702   00FE3C  0E04               	movlw	4
   703   00FE3E  184F               	xorwf	main@state^(0+1280),w,c
   704   00FE40  A4D8               	btfss	status,2,c
   705   00FE42  EF25  F07F         	goto	u821
   706   00FE46  EF27  F07F         	goto	u820
   707   00FE4A                     u821:
   708   00FE4A  EF29  F07F         	goto	l1930
   709   00FE4E                     u820:
   710   00FE4E                     
   711                           ;main.c: 174:         {;main.c: 175:             state = MANUAL;
   712   00FE4E  0E00               	movlw	0
   713   00FE50  6E4F               	movwf	main@state^(0+1280),c
   714   00FE52                     l1930:
   715                           
   716                           ;main.c: 181:     LOOPDELAY_Init(20);
   717   00FE52  0E00               	movlw	0
   718   00FE54  6E02               	movwf	(LOOPDELAY_Init@newLoopTimeMS+1)^(0+1280),c
   719   00FE56  0E14               	movlw	20
   720   00FE58  6E01               	movwf	LOOPDELAY_Init@newLoopTimeMS^(0+1280),c
   721   00FE5A  ECE6  F07A         	call	_LOOPDELAY_Init	;wreg free
   722   00FE5E  50D0               	movf	208,w,c	;volatile
   723   00FE60  50CE               	movf	206,w,c	;volatile
   724   00FE62  50D0               	movf	208,w,c	;volatile
   725   00FE64  50CF               	movf	207,w,c	;volatile
   726   00FE66                     
   727                           ;main.c: 190:         ADCC_DischargeSampleCapacitor();
   728   00FE66  ECE2  F07A         	call	_ADCC_DischargeSampleCapacitor	;wreg free
   729   00FE6A                     
   730                           ;main.c: 191:         red = map(ADCC_GetSingleConversion(POT1),0,4095,0,255);
   731   00FE6A  0E02               	movlw	2
   732   00FE6C  EC4F  F07B         	call	_ADCC_GetSingleConversion
   733   00FE70  C501  F51B         	movff	?_ADCC_GetSingleConversion,map@x
   734   00FE74  C502  F51C         	movff	?_ADCC_GetSingleConversion+1,map@x+1
   735   00FE78  6A1D               	clrf	(map@x+2)^(0+1280),c
   736   00FE7A  6A1E               	clrf	(map@x+3)^(0+1280),c
   737   00FE7C  0E00               	movlw	0
   738   00FE7E  6E1F               	movwf	map@in_min^(0+1280),c
   739   00FE80  0E00               	movlw	0
   740   00FE82  6E20               	movwf	(map@in_min+1)^(0+1280),c
   741   00FE84  0E00               	movlw	0
   742   00FE86  6E21               	movwf	(map@in_min+2)^(0+1280),c
   743   00FE88  0E00               	movlw	0
   744   00FE8A  6E22               	movwf	(map@in_min+3)^(0+1280),c
   745   00FE8C  0EFF               	movlw	255
   746   00FE8E  6E23               	movwf	map@in_max^(0+1280),c
   747   00FE90  0E0F               	movlw	15
   748   00FE92  6E24               	movwf	(map@in_max+1)^(0+1280),c
   749   00FE94  0E00               	movlw	0
   750   00FE96  6E25               	movwf	(map@in_max+2)^(0+1280),c
   751   00FE98  0E00               	movlw	0
   752   00FE9A  6E26               	movwf	(map@in_max+3)^(0+1280),c
   753   00FE9C  0E00               	movlw	0
   754   00FE9E  6E27               	movwf	map@out_min^(0+1280),c
   755   00FEA0  0E00               	movlw	0
   756   00FEA2  6E28               	movwf	(map@out_min+1)^(0+1280),c
   757   00FEA4  0E00               	movlw	0
   758   00FEA6  6E29               	movwf	(map@out_min+2)^(0+1280),c
   759   00FEA8  0E00               	movlw	0
   760   00FEAA  6E2A               	movwf	(map@out_min+3)^(0+1280),c
   761   00FEAC  0EFF               	movlw	255
   762   00FEAE  6E2B               	movwf	map@out_max^(0+1280),c
   763   00FEB0  0E00               	movlw	0
   764   00FEB2  6E2C               	movwf	(map@out_max+1)^(0+1280),c
   765   00FEB4  0E00               	movlw	0
   766   00FEB6  6E2D               	movwf	(map@out_max+2)^(0+1280),c
   767   00FEB8  0E00               	movlw	0
   768   00FEBA  6E2E               	movwf	(map@out_max+3)^(0+1280),c
   769   00FEBC  EC31  F07C         	call	_map	;wreg free
   770   00FEC0  501B               	movf	?_map^(0+1280),w,c
   771   00FEC2  6E3B               	movwf	main@red^(0+1280),c
   772   00FEC4                     
   773                           ;main.c: 192:         ADCC_DischargeSampleCapacitor();
   774   00FEC4  ECE2  F07A         	call	_ADCC_DischargeSampleCapacitor	;wreg free
   775   00FEC8                     
   776                           ;main.c: 193:         green = map(ADCC_GetSingleConversion(POT2),0,4095,0,255);
   777   00FEC8  0E10               	movlw	16
   778   00FECA  EC4F  F07B         	call	_ADCC_GetSingleConversion
   779   00FECE  C501  F51B         	movff	?_ADCC_GetSingleConversion,map@x
   780   00FED2  C502  F51C         	movff	?_ADCC_GetSingleConversion+1,map@x+1
   781   00FED6  6A1D               	clrf	(map@x+2)^(0+1280),c
   782   00FED8  6A1E               	clrf	(map@x+3)^(0+1280),c
   783   00FEDA  0E00               	movlw	0
   784   00FEDC  6E1F               	movwf	map@in_min^(0+1280),c
   785   00FEDE  0E00               	movlw	0
   786   00FEE0  6E20               	movwf	(map@in_min+1)^(0+1280),c
   787   00FEE2  0E00               	movlw	0
   788   00FEE4  6E21               	movwf	(map@in_min+2)^(0+1280),c
   789   00FEE6  0E00               	movlw	0
   790   00FEE8  6E22               	movwf	(map@in_min+3)^(0+1280),c
   791   00FEEA  0EFF               	movlw	255
   792   00FEEC  6E23               	movwf	map@in_max^(0+1280),c
   793   00FEEE  0E0F               	movlw	15
   794   00FEF0  6E24               	movwf	(map@in_max+1)^(0+1280),c
   795   00FEF2  0E00               	movlw	0
   796   00FEF4  6E25               	movwf	(map@in_max+2)^(0+1280),c
   797   00FEF6  0E00               	movlw	0
   798   00FEF8  6E26               	movwf	(map@in_max+3)^(0+1280),c
   799   00FEFA  0E00               	movlw	0
   800   00FEFC  6E27               	movwf	map@out_min^(0+1280),c
   801   00FEFE  0E00               	movlw	0
   802   00FF00  6E28               	movwf	(map@out_min+1)^(0+1280),c
   803   00FF02  0E00               	movlw	0
   804   00FF04  6E29               	movwf	(map@out_min+2)^(0+1280),c
   805   00FF06  0E00               	movlw	0
   806   00FF08  6E2A               	movwf	(map@out_min+3)^(0+1280),c
   807   00FF0A  0EFF               	movlw	255
   808   00FF0C  6E2B               	movwf	map@out_max^(0+1280),c
   809   00FF0E  0E00               	movlw	0
   810   00FF10  6E2C               	movwf	(map@out_max+1)^(0+1280),c
   811   00FF12  0E00               	movlw	0
   812   00FF14  6E2D               	movwf	(map@out_max+2)^(0+1280),c
   813   00FF16  0E00               	movlw	0
   814   00FF18  6E2E               	movwf	(map@out_max+3)^(0+1280),c
   815   00FF1A  EC31  F07C         	call	_map	;wreg free
   816   00FF1E  501B               	movf	?_map^(0+1280),w,c
   817   00FF20  6E3C               	movwf	main@green^(0+1280),c
   818   00FF22                     
   819                           ;main.c: 194:         ADCC_DischargeSampleCapacitor();
   820   00FF22  ECE2  F07A         	call	_ADCC_DischargeSampleCapacitor	;wreg free
   821   00FF26                     
   822                           ;main.c: 195:         blue = map(ADCC_GetSingleConversion(POT3),0,4095,0,255);
   823   00FF26  0E11               	movlw	17
   824   00FF28  EC4F  F07B         	call	_ADCC_GetSingleConversion
   825   00FF2C  C501  F51B         	movff	?_ADCC_GetSingleConversion,map@x
   826   00FF30  C502  F51C         	movff	?_ADCC_GetSingleConversion+1,map@x+1
   827   00FF34  6A1D               	clrf	(map@x+2)^(0+1280),c
   828   00FF36  6A1E               	clrf	(map@x+3)^(0+1280),c
   829   00FF38  0E00               	movlw	0
   830   00FF3A  6E1F               	movwf	map@in_min^(0+1280),c
   831   00FF3C  0E00               	movlw	0
   832   00FF3E  6E20               	movwf	(map@in_min+1)^(0+1280),c
   833   00FF40  0E00               	movlw	0
   834   00FF42  6E21               	movwf	(map@in_min+2)^(0+1280),c
   835   00FF44  0E00               	movlw	0
   836   00FF46  6E22               	movwf	(map@in_min+3)^(0+1280),c
   837   00FF48  0EFF               	movlw	255
   838   00FF4A  6E23               	movwf	map@in_max^(0+1280),c
   839   00FF4C  0E0F               	movlw	15
   840   00FF4E  6E24               	movwf	(map@in_max+1)^(0+1280),c
   841   00FF50  0E00               	movlw	0
   842   00FF52  6E25               	movwf	(map@in_max+2)^(0+1280),c
   843   00FF54  0E00               	movlw	0
   844   00FF56  6E26               	movwf	(map@in_max+3)^(0+1280),c
   845   00FF58  0E00               	movlw	0
   846   00FF5A  6E27               	movwf	map@out_min^(0+1280),c
   847   00FF5C  0E00               	movlw	0
   848   00FF5E  6E28               	movwf	(map@out_min+1)^(0+1280),c
   849   00FF60  0E00               	movlw	0
   850   00FF62  6E29               	movwf	(map@out_min+2)^(0+1280),c
   851   00FF64  0E00               	movlw	0
   852   00FF66  6E2A               	movwf	(map@out_min+3)^(0+1280),c
   853   00FF68  0EFF               	movlw	255
   854   00FF6A  6E2B               	movwf	map@out_max^(0+1280),c
   855   00FF6C  0E00               	movlw	0
   856   00FF6E  6E2C               	movwf	(map@out_max+1)^(0+1280),c
   857   00FF70  0E00               	movlw	0
   858   00FF72  6E2D               	movwf	(map@out_max+2)^(0+1280),c
   859   00FF74  0E00               	movlw	0
   860   00FF76  6E2E               	movwf	(map@out_max+3)^(0+1280),c
   861   00FF78  EC31  F07C         	call	_map	;wreg free
   862   00FF7C  501B               	movf	?_map^(0+1280),w,c
   863   00FF7E  6E3D               	movwf	main@blue^(0+1280),c
   864   00FF80                     
   865                           ;main.c: 196:         ADCC_DischargeSampleCapacitor();
   866   00FF80  ECE2  F07A         	call	_ADCC_DischargeSampleCapacitor	;wreg free
   867   00FF84  0E12               	movlw	18
   868   00FF86  EC4F  F07B         	call	_ADCC_GetSingleConversion
   869   00FF8A  C501  F51B         	movff	?_ADCC_GetSingleConversion,map@x
   870   00FF8E  C502  F51C         	movff	?_ADCC_GetSingleConversion+1,map@x+1
   871   00FF92  6A1D               	clrf	(map@x+2)^(0+1280),c
   872   00FF94  6A1E               	clrf	(map@x+3)^(0+1280),c
   873   00FF96  0E00               	movlw	0
   874   00FF98  6E1F               	movwf	map@in_min^(0+1280),c
   875   00FF9A  0E00               	movlw	0
   876   00FF9C  6E20               	movwf	(map@in_min+1)^(0+1280),c
   877   00FF9E  0E00               	movlw	0
   878   00FFA0  6E21               	movwf	(map@in_min+2)^(0+1280),c
   879   00FFA2  0E00               	movlw	0
   880   00FFA4  6E22               	movwf	(map@in_min+3)^(0+1280),c
   881   00FFA6  0EFF               	movlw	255
   882   00FFA8  6E23               	movwf	map@in_max^(0+1280),c
   883   00FFAA  0E0F               	movlw	15
   884   00FFAC  6E24               	movwf	(map@in_max+1)^(0+1280),c
   885   00FFAE  0E00               	movlw	0
   886   00FFB0  6E25               	movwf	(map@in_max+2)^(0+1280),c
   887   00FFB2  0E00               	movlw	0
   888   00FFB4  6E26               	movwf	(map@in_max+3)^(0+1280),c
   889   00FFB6  0E00               	movlw	0
   890   00FFB8  6E27               	movwf	map@out_min^(0+1280),c
   891   00FFBA  0E00               	movlw	0
   892   00FFBC  6E28               	movwf	(map@out_min+1)^(0+1280),c
   893   00FFBE  0E00               	movlw	0
   894   00FFC0  6E29               	movwf	(map@out_min+2)^(0+1280),c
   895   00FFC2  0E00               	movlw	0
   896   00FFC4  6E2A               	movwf	(map@out_min+3)^(0+1280),c
   897   00FFC6  0EFF               	movlw	255
   898   00FFC8  6E2B               	movwf	map@out_max^(0+1280),c
   899   00FFCA  0E00               	movlw	0
   900   00FFCC  6E2C               	movwf	(map@out_max+1)^(0+1280),c
   901   00FFCE  0E00               	movlw	0
   902   00FFD0  6E2D               	movwf	(map@out_max+2)^(0+1280),c
   903   00FFD2  0E00               	movlw	0
   904   00FFD4  6E2E               	movwf	(map@out_max+3)^(0+1280),c
   905   00FFD6  EC31  F07C         	call	_map	;wreg free
   906   00FFDA                     l1956:
   907                           
   908                           ;main.c: 202:         {;main.c: 203:             LED_WriteFull(20,0,0,144);
   909   00FFDA  0E00               	movlw	0
   910   00FFDC  6E0B               	movwf	LED_WriteFull@green^(0+1280),c
   911   00FFDE  0E00               	movlw	0
   912   00FFE0  6E0C               	movwf	LED_WriteFull@blue^(0+1280),c
   913   00FFE2  0E90               	movlw	144
   914   00FFE4  6E0D               	movwf	LED_WriteFull@ledcount^(0+1280),c
   915   00FFE6  0E00               	movlw	0
   916   00FFE8  6E0E               	movwf	(LED_WriteFull@ledcount+1)^(0+1280),c
   917   00FFEA  0E00               	movlw	0
   918   00FFEC  6E0F               	movwf	(LED_WriteFull@ledcount+2)^(0+1280),c
   919   00FFEE  0E14               	movlw	20
   920   00FFF0  ECF4  F07B         	call	_LED_WriteFull
   921   00FFF4  EFED  F07F         	goto	l1956
   922   00FFF8  EFFE  F07F         	goto	start
   923   00FFFC                     __end_of_main:
   924                           	callstack 0
   925                           
   926                           ; #config settings
   927                           
   928                           	psect	cinit
   929   00F5D6                     __pcinit:
   930                           	callstack 0
   931   00F5D6                     start_initialization:
   932                           	callstack 0
   933   00F5D6                     __initialization:
   934                           	callstack 0
   935                           
   936                           ; Clear objects allocated to COMRAM (4 bytes)
   937   00F5D6  6A53               	clrf	(__pbssCOMRAM+3)& (0+255),c
   938   00F5D8  6A52               	clrf	(__pbssCOMRAM+2)& (0+255),c
   939   00F5DA  6A51               	clrf	(__pbssCOMRAM+1)& (0+255),c
   940   00F5DC  6A50               	clrf	__pbssCOMRAM& (0+255),c
   941   00F5DE                     end_of_initialization:
   942                           	callstack 0
   943   00F5DE                     __end_of__initialization:
   944                           	callstack 0
   945   00F5DE  0100               	movlb	0
   946   00F5E0  EFA4  F07D         	goto	_main	;jump to C main() function
   947                           
   948                           	psect	bssCOMRAM
   949   000550                     __pbssCOMRAM:
   950                           	callstack 0
   951   000550                     _loopTimeMS:
   952                           	callstack 0
   953   000550                     	ds	2
   954   000552                     _loopTimeCnt:
   955                           	callstack 0
   956   000552                     	ds	2
   957                           
   958                           	psect	cstackCOMRAM
   959   000501                     __pcstackCOMRAM:
   960                           	callstack 0
   961   000501                     ?_ADCC_GetSingleConversion:
   962                           	callstack 0
   963   000501                     ?___ltdiv:
   964                           	callstack 0
   965   000501                     ?___lmul:
   966                           	callstack 0
   967   000501                     ws_send_byte@K:
   968                           	callstack 0
   969   000501                     DATAEE_ReadByte@bAdd:
   970                           	callstack 0
   971   000501                     LOOPDELAY_Init@newLoopTimeMS:
   972                           	callstack 0
   973   000501                     ___ltdiv@dividend:
   974                           	callstack 0
   975   000501                     ___lmul@multiplier:
   976                           	callstack 0
   977                           
   978                           ; 4 bytes @ 0x0
   979   000501                     	ds	1
   980   000502                     WS2812B_Write@G:
   981                           	callstack 0
   982                           
   983                           ; 1 bytes @ 0x1
   984   000502                     	ds	1
   985   000503                     ??_ADCC_GetSingleConversion:
   986   000503                     WS2812B_Write@B:
   987                           	callstack 0
   988                           
   989                           ; 1 bytes @ 0x2
   990   000503                     	ds	1
   991   000504                     WS2812B_Write@R:
   992                           	callstack 0
   993   000504                     ___ltdiv@divisor:
   994                           	callstack 0
   995                           
   996                           ; 3 bytes @ 0x3
   997   000504                     	ds	1
   998   000505                     ADCC_GetSingleConversion@channel:
   999                           	callstack 0
  1000   000505                     ___lmul@multiplicand:
  1001                           	callstack 0
  1002                           
  1003                           ; 4 bytes @ 0x4
  1004   000505                     	ds	2
  1005   000507                     ___ltdiv@quotient:
  1006                           	callstack 0
  1007                           
  1008                           ; 3 bytes @ 0x6
  1009   000507                     	ds	2
  1010   000509                     ___lmul@product:
  1011                           	callstack 0
  1012                           
  1013                           ; 4 bytes @ 0x8
  1014   000509                     	ds	1
  1015   00050A                     ___ltdiv@counter:
  1016                           	callstack 0
  1017                           
  1018                           ; 1 bytes @ 0x9
  1019   00050A                     	ds	1
  1020   00050B                     LED_WriteFull@green:
  1021                           	callstack 0
  1022                           
  1023                           ; 1 bytes @ 0xA
  1024   00050B                     	ds	1
  1025   00050C                     LED_WriteFull@blue:
  1026                           	callstack 0
  1027                           
  1028                           ; 1 bytes @ 0xB
  1029   00050C                     	ds	1
  1030   00050D                     ?___aldiv:
  1031                           	callstack 0
  1032   00050D                     LED_WriteFull@ledcount:
  1033                           	callstack 0
  1034   00050D                     ___aldiv@dividend:
  1035                           	callstack 0
  1036                           
  1037                           ; 4 bytes @ 0xC
  1038   00050D                     	ds	3
  1039   000510                     LED_WriteFull@red:
  1040                           	callstack 0
  1041                           
  1042                           ; 1 bytes @ 0xF
  1043   000510                     	ds	1
  1044   000511                     LED_WriteFull@x:
  1045                           	callstack 0
  1046   000511                     ___aldiv@divisor:
  1047                           	callstack 0
  1048                           
  1049                           ; 4 bytes @ 0x10
  1050   000511                     	ds	3
  1051   000514                     LED_WriteFull@i:
  1052                           	callstack 0
  1053                           
  1054                           ; 1 bytes @ 0x13
  1055   000514                     	ds	1
  1056   000515                     ___aldiv@counter:
  1057                           	callstack 0
  1058                           
  1059                           ; 1 bytes @ 0x14
  1060   000515                     	ds	1
  1061   000516                     ___aldiv@sign:
  1062                           	callstack 0
  1063                           
  1064                           ; 1 bytes @ 0x15
  1065   000516                     	ds	1
  1066   000517                     ___aldiv@quotient:
  1067                           	callstack 0
  1068                           
  1069                           ; 4 bytes @ 0x16
  1070   000517                     	ds	4
  1071   00051B                     ?_map:
  1072                           	callstack 0
  1073   00051B                     map@x:
  1074                           	callstack 0
  1075                           
  1076                           ; 4 bytes @ 0x1A
  1077   00051B                     	ds	4
  1078   00051F                     map@in_min:
  1079                           	callstack 0
  1080                           
  1081                           ; 4 bytes @ 0x1E
  1082   00051F                     	ds	4
  1083   000523                     map@in_max:
  1084                           	callstack 0
  1085                           
  1086                           ; 4 bytes @ 0x22
  1087   000523                     	ds	4
  1088   000527                     map@out_min:
  1089                           	callstack 0
  1090                           
  1091                           ; 4 bytes @ 0x26
  1092   000527                     	ds	4
  1093   00052B                     map@out_max:
  1094                           	callstack 0
  1095                           
  1096                           ; 4 bytes @ 0x2A
  1097   00052B                     	ds	4
  1098   00052F                     main@timeout5s:
  1099                           	callstack 0
  1100                           
  1101                           ; 2 bytes @ 0x2E
  1102   00052F                     	ds	2
  1103   000531                     main@timeout5sPressed1:
  1104                           	callstack 0
  1105                           
  1106                           ; 2 bytes @ 0x30
  1107   000531                     	ds	2
  1108   000533                     main@timeout5sPressed2:
  1109                           	callstack 0
  1110                           
  1111                           ; 2 bytes @ 0x32
  1112   000533                     	ds	2
  1113   000535                     main@timeout5sPressed3:
  1114                           	callstack 0
  1115                           
  1116                           ; 2 bytes @ 0x34
  1117   000535                     	ds	2
  1118   000537                     main@timeout5sPressed4:
  1119                           	callstack 0
  1120                           
  1121                           ; 2 bytes @ 0x36
  1122   000537                     	ds	2
  1123   000539                     main@timeout10s:
  1124                           	callstack 0
  1125                           
  1126                           ; 2 bytes @ 0x38
  1127   000539                     	ds	2
  1128   00053B                     main@red:
  1129                           	callstack 0
  1130                           
  1131                           ; 1 bytes @ 0x3A
  1132   00053B                     	ds	1
  1133   00053C                     main@green:
  1134                           	callstack 0
  1135                           
  1136                           ; 1 bytes @ 0x3B
  1137   00053C                     	ds	1
  1138   00053D                     main@blue:
  1139                           	callstack 0
  1140                           
  1141                           ; 1 bytes @ 0x3C
  1142   00053D                     	ds	1
  1143   00053E                     main@redMode1:
  1144                           	callstack 0
  1145                           
  1146                           ; 1 bytes @ 0x3D
  1147   00053E                     	ds	1
  1148   00053F                     main@greenMode1:
  1149                           	callstack 0
  1150                           
  1151                           ; 1 bytes @ 0x3E
  1152   00053F                     	ds	1
  1153   000540                     main@blueMode1:
  1154                           	callstack 0
  1155                           
  1156                           ; 1 bytes @ 0x3F
  1157   000540                     	ds	1
  1158   000541                     main@redMode2:
  1159                           	callstack 0
  1160                           
  1161                           ; 1 bytes @ 0x40
  1162   000541                     	ds	1
  1163   000542                     main@greenMode2:
  1164                           	callstack 0
  1165                           
  1166                           ; 1 bytes @ 0x41
  1167   000542                     	ds	1
  1168   000543                     main@blueMode2:
  1169                           	callstack 0
  1170                           
  1171                           ; 1 bytes @ 0x42
  1172   000543                     	ds	1
  1173   000544                     main@redMode3:
  1174                           	callstack 0
  1175                           
  1176                           ; 1 bytes @ 0x43
  1177   000544                     	ds	1
  1178   000545                     main@greenMode3:
  1179                           	callstack 0
  1180                           
  1181                           ; 1 bytes @ 0x44
  1182   000545                     	ds	1
  1183   000546                     main@blueMode3:
  1184                           	callstack 0
  1185                           
  1186                           ; 1 bytes @ 0x45
  1187   000546                     	ds	1
  1188   000547                     main@redMode4:
  1189                           	callstack 0
  1190                           
  1191                           ; 1 bytes @ 0x46
  1192   000547                     	ds	1
  1193   000548                     main@greenMode4:
  1194                           	callstack 0
  1195                           
  1196                           ; 1 bytes @ 0x47
  1197   000548                     	ds	1
  1198   000549                     main@blueMode4:
  1199                           	callstack 0
  1200                           
  1201                           ; 1 bytes @ 0x48
  1202   000549                     	ds	1
  1203   00054A                     main@blueAdj:
  1204                           	callstack 0
  1205                           
  1206                           ; 1 bytes @ 0x49
  1207   00054A                     	ds	1
  1208   00054B                     main@whiteAdj:
  1209                           	callstack 0
  1210                           
  1211                           ; 1 bytes @ 0x4A
  1212   00054B                     	ds	1
  1213   00054C                     main@timeout100ms:
  1214                           	callstack 0
  1215                           
  1216                           ; 1 bytes @ 0x4B
  1217   00054C                     	ds	1
  1218   00054D                     main@timeout500ms:
  1219                           	callstack 0
  1220                           
  1221                           ; 1 bytes @ 0x4C
  1222   00054D                     	ds	1
  1223   00054E                     main@timeout250ms:
  1224                           	callstack 0
  1225                           
  1226                           ; 1 bytes @ 0x4D
  1227   00054E                     	ds	1
  1228   00054F                     main@state:
  1229                           	callstack 0
  1230                           
  1231                           ; 1 bytes @ 0x4E
  1232   00054F                     	ds	1
  1233                           
  1234 ;; *************** function _map *****************
  1235 ;; Defined at:
  1236 ;;		line 10 in file "DivFunctions.c"
  1237 ;; Parameters:    Size  Location     Type
  1238 ;;  x               4   26[COMRAM] long 
  1239 ;;  in_min          4   30[COMRAM] long 
  1240 ;;  in_max          4   34[COMRAM] long 
  1241 ;;  out_min         4   38[COMRAM] long 
  1242 ;;  out_max         4   42[COMRAM] long 
  1243 ;; Auto vars:     Size  Location     Type
  1244 ;;		None
  1245 ;; Return value:  Size  Location     Type
  1246 ;;                  4   26[COMRAM] long 
  1247 ;; Registers used:
  1248 ;;		wreg, status,2, status,0, cstack
  1249 ;; Tracked objects:
  1250 ;;		On entry : 0/0
  1251 ;;		On exit  : 0/0
  1252 ;;		Unchanged: 0/0
  1253 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14  BANK15  BANK1
      +6  BANK17  BANK18  BANK19  BANK20  BANK21
  1254 ;;      Params:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1257 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1258 ;;Total ram usage:       20 bytes
  1259 ;; Hardware stack levels used: 1
  1260 ;; Hardware stack levels required when called: 1
  1261 ;; This function calls:
  1262 ;;		___aldiv
  1263 ;;		___lmul
  1264 ;; This function is called by:
  1265 ;;		_main
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269                           	psect	text1
  1270   00F862                     __ptext1:
  1271                           	callstack 0
  1272   00F862                     _map:
  1273                           	callstack 126
  1274   00F862                     
  1275                           ;DivFunctions.c: 11:   return (x - in_min) * (out_max - out_min) / (in_max - in_min) + o
      +                          ut_min;
  1276   00F862  501F               	movf	map@in_min^(0+1280),w,c
  1277   00F864  5C1B               	subwf	map@x^(0+1280),w,c
  1278   00F866  6E01               	movwf	___lmul@multiplier^(0+1280),c
  1279   00F868  5020               	movf	(map@in_min+1)^(0+1280),w,c
  1280   00F86A  581C               	subwfb	(map@x+1)^(0+1280),w,c
  1281   00F86C  6E02               	movwf	(___lmul@multiplier+1)^(0+1280),c
  1282   00F86E  5021               	movf	(map@in_min+2)^(0+1280),w,c
  1283   00F870  581D               	subwfb	(map@x+2)^(0+1280),w,c
  1284   00F872  6E03               	movwf	(___lmul@multiplier+2)^(0+1280),c
  1285   00F874  5022               	movf	(map@in_min+3)^(0+1280),w,c
  1286   00F876  581E               	subwfb	(map@x+3)^(0+1280),w,c
  1287   00F878  6E04               	movwf	(___lmul@multiplier+3)^(0+1280),c
  1288   00F87A  5027               	movf	map@out_min^(0+1280),w,c
  1289   00F87C  5C2B               	subwf	map@out_max^(0+1280),w,c
  1290   00F87E  6E05               	movwf	___lmul@multiplicand^(0+1280),c
  1291   00F880  5028               	movf	(map@out_min+1)^(0+1280),w,c
  1292   00F882  582C               	subwfb	(map@out_max+1)^(0+1280),w,c
  1293   00F884  6E06               	movwf	(___lmul@multiplicand+1)^(0+1280),c
  1294   00F886  5029               	movf	(map@out_min+2)^(0+1280),w,c
  1295   00F888  582D               	subwfb	(map@out_max+2)^(0+1280),w,c
  1296   00F88A  6E07               	movwf	(___lmul@multiplicand+2)^(0+1280),c
  1297   00F88C  502A               	movf	(map@out_min+3)^(0+1280),w,c
  1298   00F88E  582E               	subwfb	(map@out_max+3)^(0+1280),w,c
  1299   00F890  6E08               	movwf	(___lmul@multiplicand+3)^(0+1280),c
  1300   00F892  ECBF  F07B         	call	___lmul	;wreg free
  1301   00F896  C501  F50D         	movff	?___lmul,___aldiv@dividend
  1302   00F89A  C502  F50E         	movff	?___lmul+1,___aldiv@dividend+1
  1303   00F89E  C503  F50F         	movff	?___lmul+2,___aldiv@dividend+2
  1304   00F8A2  C504  F510         	movff	?___lmul+3,___aldiv@dividend+3
  1305   00F8A6  501F               	movf	map@in_min^(0+1280),w,c
  1306   00F8A8  5C23               	subwf	map@in_max^(0+1280),w,c
  1307   00F8AA  6E11               	movwf	___aldiv@divisor^(0+1280),c
  1308   00F8AC  5020               	movf	(map@in_min+1)^(0+1280),w,c
  1309   00F8AE  5824               	subwfb	(map@in_max+1)^(0+1280),w,c
  1310   00F8B0  6E12               	movwf	(___aldiv@divisor+1)^(0+1280),c
  1311   00F8B2  5021               	movf	(map@in_min+2)^(0+1280),w,c
  1312   00F8B4  5825               	subwfb	(map@in_max+2)^(0+1280),w,c
  1313   00F8B6  6E13               	movwf	(___aldiv@divisor+2)^(0+1280),c
  1314   00F8B8  5022               	movf	(map@in_min+3)^(0+1280),w,c
  1315   00F8BA  5826               	subwfb	(map@in_max+3)^(0+1280),w,c
  1316   00F8BC  6E14               	movwf	(___aldiv@divisor+3)^(0+1280),c
  1317   00F8BE  EC1E  F07D         	call	___aldiv	;wreg free
  1318   00F8C2  5027               	movf	map@out_min^(0+1280),w,c
  1319   00F8C4  240D               	addwf	?___aldiv^(0+1280),w,c
  1320   00F8C6  6E1B               	movwf	?_map^(0+1280),c
  1321   00F8C8  5028               	movf	(map@out_min+1)^(0+1280),w,c
  1322   00F8CA  200E               	addwfc	(?___aldiv+1)^(0+1280),w,c
  1323   00F8CC  6E1C               	movwf	(?_map+1)^(0+1280),c
  1324   00F8CE  5029               	movf	(map@out_min+2)^(0+1280),w,c
  1325   00F8D0  200F               	addwfc	(?___aldiv+2)^(0+1280),w,c
  1326   00F8D2  6E1D               	movwf	(?_map+2)^(0+1280),c
  1327   00F8D4  502A               	movf	(map@out_min+3)^(0+1280),w,c
  1328   00F8D6  2010               	addwfc	(?___aldiv+3)^(0+1280),w,c
  1329   00F8D8  6E1E               	movwf	(?_map+3)^(0+1280),c
  1330   00F8DA  0012               	return		;funcret
  1331   00F8DC                     __end_of_map:
  1332                           	callstack 0
  1333                           
  1334 ;; *************** function ___lmul *****************
  1335 ;; Defined at:
  1336 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul32.c"
  1337 ;; Parameters:    Size  Location     Type
  1338 ;;  multiplier      4    0[COMRAM] unsigned long 
  1339 ;;  multiplicand    4    4[COMRAM] unsigned long 
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;  product         4    8[COMRAM] unsigned long 
  1342 ;; Return value:  Size  Location     Type
  1343 ;;                  4    0[COMRAM] unsigned long 
  1344 ;; Registers used:
  1345 ;;		wreg, status,2, status,0
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14  BANK15  BANK1
      +6  BANK17  BANK18  BANK19  BANK20  BANK21
  1351 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1352 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1354 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1355 ;;Total ram usage:       12 bytes
  1356 ;; Hardware stack levels used: 1
  1357 ;; This function calls:
  1358 ;;		Nothing
  1359 ;; This function is called by:
  1360 ;;		_map
  1361 ;; This function uses a non-reentrant model
  1362 ;;
  1363                           
  1364                           	psect	text2
  1365   00F77E                     __ptext2:
  1366                           	callstack 0
  1367   00F77E                     ___lmul:
  1368                           	callstack 126
  1369   00F77E  0E00               	movlw	0
  1370   00F780  6E09               	movwf	___lmul@product^(0+1280),c
  1371   00F782  0E00               	movlw	0
  1372   00F784  6E0A               	movwf	(___lmul@product+1)^(0+1280),c
  1373   00F786  0E00               	movlw	0
  1374   00F788  6E0B               	movwf	(___lmul@product+2)^(0+1280),c
  1375   00F78A  0E00               	movlw	0
  1376   00F78C  6E0C               	movwf	(___lmul@product+3)^(0+1280),c
  1377   00F78E                     l1686:
  1378   00F78E  A001               	btfss	___lmul@multiplier^(0+1280),0,c
  1379   00F790  EFCC  F07B         	goto	u521
  1380   00F794  EFCE  F07B         	goto	u520
  1381   00F798                     u521:
  1382   00F798  EFD6  F07B         	goto	l1690
  1383   00F79C                     u520:
  1384   00F79C  5005               	movf	___lmul@multiplicand^(0+1280),w,c
  1385   00F79E  2609               	addwf	___lmul@product^(0+1280),f,c
  1386   00F7A0  5006               	movf	(___lmul@multiplicand+1)^(0+1280),w,c
  1387   00F7A2  220A               	addwfc	(___lmul@product+1)^(0+1280),f,c
  1388   00F7A4  5007               	movf	(___lmul@multiplicand+2)^(0+1280),w,c
  1389   00F7A6  220B               	addwfc	(___lmul@product+2)^(0+1280),f,c
  1390   00F7A8  5008               	movf	(___lmul@multiplicand+3)^(0+1280),w,c
  1391   00F7AA  220C               	addwfc	(___lmul@product+3)^(0+1280),f,c
  1392   00F7AC                     l1690:
  1393   00F7AC  90D8               	bcf	status,0,c
  1394   00F7AE  3605               	rlcf	___lmul@multiplicand^(0+1280),f,c
  1395   00F7B0  3606               	rlcf	(___lmul@multiplicand+1)^(0+1280),f,c
  1396   00F7B2  3607               	rlcf	(___lmul@multiplicand+2)^(0+1280),f,c
  1397   00F7B4  3608               	rlcf	(___lmul@multiplicand+3)^(0+1280),f,c
  1398   00F7B6  90D8               	bcf	status,0,c
  1399   00F7B8  3204               	rrcf	(___lmul@multiplier+3)^(0+1280),f,c
  1400   00F7BA  3203               	rrcf	(___lmul@multiplier+2)^(0+1280),f,c
  1401   00F7BC  3202               	rrcf	(___lmul@multiplier+1)^(0+1280),f,c
  1402   00F7BE  3201               	rrcf	___lmul@multiplier^(0+1280),f,c
  1403   00F7C0  5001               	movf	___lmul@multiplier^(0+1280),w,c
  1404   00F7C2  1002               	iorwf	(___lmul@multiplier+1)^(0+1280),w,c
  1405   00F7C4  1003               	iorwf	(___lmul@multiplier+2)^(0+1280),w,c
  1406   00F7C6  1004               	iorwf	(___lmul@multiplier+3)^(0+1280),w,c
  1407   00F7C8  A4D8               	btfss	status,2,c
  1408   00F7CA  EFE9  F07B         	goto	u531
  1409   00F7CE  EFEB  F07B         	goto	u530
  1410   00F7D2                     u531:
  1411   00F7D2  EFC7  F07B         	goto	l1686
  1412   00F7D6                     u530:
  1413   00F7D6  C509  F501         	movff	___lmul@product,?___lmul
  1414   00F7DA  C50A  F502         	movff	___lmul@product+1,?___lmul+1
  1415   00F7DE  C50B  F503         	movff	___lmul@product+2,?___lmul+2
  1416   00F7E2  C50C  F504         	movff	___lmul@product+3,?___lmul+3
  1417   00F7E6  0012               	return		;funcret
  1418   00F7E8                     __end_of___lmul:
  1419                           	callstack 0
  1420                           
  1421 ;; *************** function ___aldiv *****************
  1422 ;; Defined at:
  1423 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aldiv.c"
  1424 ;; Parameters:    Size  Location     Type
  1425 ;;  dividend        4   12[COMRAM] long 
  1426 ;;  divisor         4   16[COMRAM] long 
  1427 ;; Auto vars:     Size  Location     Type
  1428 ;;  quotient        4   22[COMRAM] long 
  1429 ;;  sign            1   21[COMRAM] unsigned char 
  1430 ;;  counter         1   20[COMRAM] unsigned char 
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  4   12[COMRAM] long 
  1433 ;; Registers used:
  1434 ;;		wreg, status,2, status,0
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14  BANK15  BANK1
      +6  BANK17  BANK18  BANK19  BANK20  BANK21
  1440 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1441 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1443 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1444 ;;Total ram usage:       14 bytes
  1445 ;; Hardware stack levels used: 1
  1446 ;; This function calls:
  1447 ;;		Nothing
  1448 ;; This function is called by:
  1449 ;;		_map
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452                           
  1453                           	psect	text3
  1454   00FA3C                     __ptext3:
  1455                           	callstack 0
  1456   00FA3C                     ___aldiv:
  1457                           	callstack 126
  1458   00FA3C  0E00               	movlw	0
  1459   00FA3E  6E16               	movwf	___aldiv@sign^(0+1280),c
  1460   00FA40  BE14               	btfsc	(___aldiv@divisor+3)^(0+1280),7,c
  1461   00FA42  EF27  F07D         	goto	u540
  1462   00FA46  EF25  F07D         	goto	u541
  1463   00FA4A                     u541:
  1464   00FA4A  EF31  F07D         	goto	l1702
  1465   00FA4E                     u540:
  1466   00FA4E  1E14               	comf	(___aldiv@divisor+3)^(0+1280),f,c
  1467   00FA50  1E13               	comf	(___aldiv@divisor+2)^(0+1280),f,c
  1468   00FA52  1E12               	comf	(___aldiv@divisor+1)^(0+1280),f,c
  1469   00FA54  6C11               	negf	___aldiv@divisor^(0+1280),c
  1470   00FA56  0E00               	movlw	0
  1471   00FA58  2212               	addwfc	(___aldiv@divisor+1)^(0+1280),f,c
  1472   00FA5A  2213               	addwfc	(___aldiv@divisor+2)^(0+1280),f,c
  1473   00FA5C  2214               	addwfc	(___aldiv@divisor+3)^(0+1280),f,c
  1474   00FA5E  0E01               	movlw	1
  1475   00FA60  6E16               	movwf	___aldiv@sign^(0+1280),c
  1476   00FA62                     l1702:
  1477   00FA62  BE10               	btfsc	(___aldiv@dividend+3)^(0+1280),7,c
  1478   00FA64  EF38  F07D         	goto	u550
  1479   00FA68  EF36  F07D         	goto	u551
  1480   00FA6C                     u551:
  1481   00FA6C  EF42  F07D         	goto	l1708
  1482   00FA70                     u550:
  1483   00FA70  1E10               	comf	(___aldiv@dividend+3)^(0+1280),f,c
  1484   00FA72  1E0F               	comf	(___aldiv@dividend+2)^(0+1280),f,c
  1485   00FA74  1E0E               	comf	(___aldiv@dividend+1)^(0+1280),f,c
  1486   00FA76  6C0D               	negf	___aldiv@dividend^(0+1280),c
  1487   00FA78  0E00               	movlw	0
  1488   00FA7A  220E               	addwfc	(___aldiv@dividend+1)^(0+1280),f,c
  1489   00FA7C  220F               	addwfc	(___aldiv@dividend+2)^(0+1280),f,c
  1490   00FA7E  2210               	addwfc	(___aldiv@dividend+3)^(0+1280),f,c
  1491   00FA80  0E01               	movlw	1
  1492   00FA82  1A16               	xorwf	___aldiv@sign^(0+1280),f,c
  1493   00FA84                     l1708:
  1494   00FA84  0E00               	movlw	0
  1495   00FA86  6E17               	movwf	___aldiv@quotient^(0+1280),c
  1496   00FA88  0E00               	movlw	0
  1497   00FA8A  6E18               	movwf	(___aldiv@quotient+1)^(0+1280),c
  1498   00FA8C  0E00               	movlw	0
  1499   00FA8E  6E19               	movwf	(___aldiv@quotient+2)^(0+1280),c
  1500   00FA90  0E00               	movlw	0
  1501   00FA92  6E1A               	movwf	(___aldiv@quotient+3)^(0+1280),c
  1502   00FA94  5011               	movf	___aldiv@divisor^(0+1280),w,c
  1503   00FA96  1012               	iorwf	(___aldiv@divisor+1)^(0+1280),w,c
  1504   00FA98  1013               	iorwf	(___aldiv@divisor+2)^(0+1280),w,c
  1505   00FA9A  1014               	iorwf	(___aldiv@divisor+3)^(0+1280),w,c
  1506   00FA9C  B4D8               	btfsc	status,2,c
  1507   00FA9E  EF53  F07D         	goto	u561
  1508   00FAA2  EF55  F07D         	goto	u560
  1509   00FAA6                     u561:
  1510   00FAA6  EF8B  F07D         	goto	l1730
  1511   00FAAA                     u560:
  1512   00FAAA  0E01               	movlw	1
  1513   00FAAC  6E15               	movwf	___aldiv@counter^(0+1280),c
  1514   00FAAE  EF5F  F07D         	goto	l1716
  1515   00FAB2                     l1714:
  1516   00FAB2  90D8               	bcf	status,0,c
  1517   00FAB4  3611               	rlcf	___aldiv@divisor^(0+1280),f,c
  1518   00FAB6  3612               	rlcf	(___aldiv@divisor+1)^(0+1280),f,c
  1519   00FAB8  3613               	rlcf	(___aldiv@divisor+2)^(0+1280),f,c
  1520   00FABA  3614               	rlcf	(___aldiv@divisor+3)^(0+1280),f,c
  1521   00FABC  2A15               	incf	___aldiv@counter^(0+1280),f,c
  1522   00FABE                     l1716:
  1523   00FABE  AE14               	btfss	(___aldiv@divisor+3)^(0+1280),7,c
  1524   00FAC0  EF64  F07D         	goto	u571
  1525   00FAC4  EF66  F07D         	goto	u570
  1526   00FAC8                     u571:
  1527   00FAC8  EF59  F07D         	goto	l1714
  1528   00FACC                     u570:
  1529   00FACC                     l1718:
  1530   00FACC  90D8               	bcf	status,0,c
  1531   00FACE  3617               	rlcf	___aldiv@quotient^(0+1280),f,c
  1532   00FAD0  3618               	rlcf	(___aldiv@quotient+1)^(0+1280),f,c
  1533   00FAD2  3619               	rlcf	(___aldiv@quotient+2)^(0+1280),f,c
  1534   00FAD4  361A               	rlcf	(___aldiv@quotient+3)^(0+1280),f,c
  1535   00FAD6  5011               	movf	___aldiv@divisor^(0+1280),w,c
  1536   00FAD8  5C0D               	subwf	___aldiv@dividend^(0+1280),w,c
  1537   00FADA  5012               	movf	(___aldiv@divisor+1)^(0+1280),w,c
  1538   00FADC  580E               	subwfb	(___aldiv@dividend+1)^(0+1280),w,c
  1539   00FADE  5013               	movf	(___aldiv@divisor+2)^(0+1280),w,c
  1540   00FAE0  580F               	subwfb	(___aldiv@dividend+2)^(0+1280),w,c
  1541   00FAE2  5014               	movf	(___aldiv@divisor+3)^(0+1280),w,c
  1542   00FAE4  5810               	subwfb	(___aldiv@dividend+3)^(0+1280),w,c
  1543   00FAE6  A0D8               	btfss	status,0,c
  1544   00FAE8  EF78  F07D         	goto	u581
  1545   00FAEC  EF7A  F07D         	goto	u580
  1546   00FAF0                     u581:
  1547   00FAF0  EF83  F07D         	goto	l1726
  1548   00FAF4                     u580:
  1549   00FAF4  5011               	movf	___aldiv@divisor^(0+1280),w,c
  1550   00FAF6  5E0D               	subwf	___aldiv@dividend^(0+1280),f,c
  1551   00FAF8  5012               	movf	(___aldiv@divisor+1)^(0+1280),w,c
  1552   00FAFA  5A0E               	subwfb	(___aldiv@dividend+1)^(0+1280),f,c
  1553   00FAFC  5013               	movf	(___aldiv@divisor+2)^(0+1280),w,c
  1554   00FAFE  5A0F               	subwfb	(___aldiv@dividend+2)^(0+1280),f,c
  1555   00FB00  5014               	movf	(___aldiv@divisor+3)^(0+1280),w,c
  1556   00FB02  5A10               	subwfb	(___aldiv@dividend+3)^(0+1280),f,c
  1557   00FB04  8017               	bsf	___aldiv@quotient^(0+1280),0,c
  1558   00FB06                     l1726:
  1559   00FB06  90D8               	bcf	status,0,c
  1560   00FB08  3214               	rrcf	(___aldiv@divisor+3)^(0+1280),f,c
  1561   00FB0A  3213               	rrcf	(___aldiv@divisor+2)^(0+1280),f,c
  1562   00FB0C  3212               	rrcf	(___aldiv@divisor+1)^(0+1280),f,c
  1563   00FB0E  3211               	rrcf	___aldiv@divisor^(0+1280),f,c
  1564   00FB10  2E15               	decfsz	___aldiv@counter^(0+1280),f,c
  1565   00FB12  EF66  F07D         	goto	l1718
  1566   00FB16                     l1730:
  1567   00FB16  5016               	movf	___aldiv@sign^(0+1280),w,c
  1568   00FB18  B4D8               	btfsc	status,2,c
  1569   00FB1A  EF91  F07D         	goto	u591
  1570   00FB1E  EF93  F07D         	goto	u590
  1571   00FB22                     u591:
  1572   00FB22  EF9B  F07D         	goto	l1734
  1573   00FB26                     u590:
  1574   00FB26  1E1A               	comf	(___aldiv@quotient+3)^(0+1280),f,c
  1575   00FB28  1E19               	comf	(___aldiv@quotient+2)^(0+1280),f,c
  1576   00FB2A  1E18               	comf	(___aldiv@quotient+1)^(0+1280),f,c
  1577   00FB2C  6C17               	negf	___aldiv@quotient^(0+1280),c
  1578   00FB2E  0E00               	movlw	0
  1579   00FB30  2218               	addwfc	(___aldiv@quotient+1)^(0+1280),f,c
  1580   00FB32  2219               	addwfc	(___aldiv@quotient+2)^(0+1280),f,c
  1581   00FB34  221A               	addwfc	(___aldiv@quotient+3)^(0+1280),f,c
  1582   00FB36                     l1734:
  1583   00FB36  C517  F50D         	movff	___aldiv@quotient,?___aldiv
  1584   00FB3A  C518  F50E         	movff	___aldiv@quotient+1,?___aldiv+1
  1585   00FB3E  C519  F50F         	movff	___aldiv@quotient+2,?___aldiv+2
  1586   00FB42  C51A  F510         	movff	___aldiv@quotient+3,?___aldiv+3
  1587   00FB46  0012               	return		;funcret
  1588   00FB48                     __end_of___aldiv:
  1589                           	callstack 0
  1590                           
  1591 ;; *************** function _SYSTEM_Initialize *****************
  1592 ;; Defined at:
  1593 ;;		line 50 in file "mcc_generated_files/mcc.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;		None
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;		None
  1598 ;; Return value:  Size  Location     Type
  1599 ;;                  1    wreg      void 
  1600 ;; Registers used:
  1601 ;;		wreg, status,2, cstack
  1602 ;; Tracked objects:
  1603 ;;		On entry : 0/0
  1604 ;;		On exit  : 0/0
  1605 ;;		Unchanged: 0/0
  1606 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14  BANK15  BANK1
      +6  BANK17  BANK18  BANK19  BANK20  BANK21
  1607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1611 ;;Total ram usage:        0 bytes
  1612 ;; Hardware stack levels used: 1
  1613 ;; Hardware stack levels required when called: 1
  1614 ;; This function calls:
  1615 ;;		_ADCC_Initialize
  1616 ;;		_OSCILLATOR_Initialize
  1617 ;;		_PIN_MANAGER_Initialize
  1618 ;;		_PMD_Initialize
  1619 ;; This function is called by:
  1620 ;;		_main
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           	psect	text4
  1625   00F5E4                     __ptext4:
  1626                           	callstack 0
  1627   00F5E4                     _SYSTEM_Initialize:
  1628                           	callstack 126
  1629   00F5E4                     
  1630                           ;mcc_generated_files/mcc.c: 52:     PMD_Initialize();
  1631   00F5E4  EC20  F07B         	call	_PMD_Initialize	;wreg free
  1632                           
  1633                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  1634   00F5E8  EC67  F07B         	call	_PIN_MANAGER_Initialize	;wreg free
  1635                           
  1636                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  1637   00F5EC  EC12  F07B         	call	_OSCILLATOR_Initialize	;wreg free
  1638                           
  1639                           ;mcc_generated_files/mcc.c: 55:     ADCC_Initialize();
  1640   00F5F0  EC91  F07B         	call	_ADCC_Initialize	;wreg free
  1641   00F5F4  0012               	return		;funcret
  1642   00F5F6                     __end_of_SYSTEM_Initialize:
  1643                           	callstack 0
  1644                           
  1645 ;; *************** function _PMD_Initialize *****************
  1646 ;; Defined at:
  1647 ;;		line 74 in file "mcc_generated_files/mcc.c"
  1648 ;; Parameters:    Size  Location     Type
  1649 ;;		None
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;		None
  1652 ;; Return value:  Size  Location     Type
  1653 ;;                  1    wreg      void 
  1654 ;; Registers used:
  1655 ;;		wreg, status,2
  1656 ;; Tracked objects:
  1657 ;;		On entry : 0/0
  1658 ;;		On exit  : 0/0
  1659 ;;		Unchanged: 0/0
  1660 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14  BANK15  BANK1
      +6  BANK17  BANK18  BANK19  BANK20  BANK21
  1661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1665 ;;Total ram usage:        0 bytes
  1666 ;; Hardware stack levels used: 1
  1667 ;; This function calls:
  1668 ;;		Nothing
  1669 ;; This function is called by:
  1670 ;;		_SYSTEM_Initialize
  1671 ;; This function uses a non-reentrant model
  1672 ;;
  1673                           
  1674                           	psect	text5
  1675   00F640                     __ptext5:
  1676                           	callstack 0
  1677   00F640                     _PMD_Initialize:
  1678                           	callstack 126
  1679   00F640                     
  1680                           ;mcc_generated_files/mcc.c: 77:     PMD0 = 0x00;
  1681   00F640  0E00               	movlw	0
  1682   00F642  0100               	movlb	0	; () banked
  1683   00F644  6F63               	movwf	99,b	;volatile
  1684                           
  1685                           ;mcc_generated_files/mcc.c: 79:     PMD1 = 0x00;
  1686   00F646  0E00               	movlw	0
  1687   00F648  6F64               	movwf	100,b	;volatile
  1688                           
  1689                           ;mcc_generated_files/mcc.c: 81:     PMD2 = 0x00;
  1690   00F64A  0E00               	movlw	0
  1691   00F64C  6F65               	movwf	101,b	;volatile
  1692                           
  1693                           ;mcc_generated_files/mcc.c: 83:     PMD3 = 0x00;
  1694   00F64E  0E00               	movlw	0
  1695   00F650  6F66               	movwf	102,b	;volatile
  1696                           
  1697                           ;mcc_generated_files/mcc.c: 85:     PMD4 = 0x00;
  1698   00F652  0E00               	movlw	0
  1699   00F654  6F67               	movwf	103,b	;volatile
  1700                           
  1701                           ;mcc_generated_files/mcc.c: 87:     PMD5 = 0x00;
  1702   00F656  0E00               	movlw	0
  1703   00F658  6F68               	movwf	104,b	;volatile
  1704   00F65A                     
  1705                           ; BSR set to: 0
  1706   00F65A  0012               	return		;funcret
  1707   00F65C                     __end_of_PMD_Initialize:
  1708                           	callstack 0
  1709                           
  1710 ;; *************** function _PIN_MANAGER_Initialize *****************
  1711 ;; Defined at:
  1712 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  1713 ;; Parameters:    Size  Location     Type
  1714 ;;		None
  1715 ;; Auto vars:     Size  Location     Type
  1716 ;;		None
  1717 ;; Return value:  Size  Location     Type
  1718 ;;                  1    wreg      void 
  1719 ;; Registers used:
  1720 ;;		wreg, status,2
  1721 ;; Tracked objects:
  1722 ;;		On entry : 0/0
  1723 ;;		On exit  : 0/0
  1724 ;;		Unchanged: 0/0
  1725 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14  BANK15  BANK1
      +6  BANK17  BANK18  BANK19  BANK20  BANK21
  1726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1730 ;;Total ram usage:        0 bytes
  1731 ;; Hardware stack levels used: 1
  1732 ;; This function calls:
  1733 ;;		Nothing
  1734 ;; This function is called by:
  1735 ;;		_SYSTEM_Initialize
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text6
  1740   00F6CE                     __ptext6:
  1741                           	callstack 0
  1742   00F6CE                     _PIN_MANAGER_Initialize:
  1743                           	callstack 126
  1744   00F6CE                     
  1745                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  1746   00F6CE  0E00               	movlw	0
  1747   00F6D0  6EBE               	movwf	190,c	;volatile
  1748                           
  1749                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  1750   00F6D2  0E00               	movlw	0
  1751   00F6D4  6EBF               	movwf	191,c	;volatile
  1752                           
  1753                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  1754   00F6D6  0E00               	movlw	0
  1755   00F6D8  6EC0               	movwf	192,c	;volatile
  1756                           
  1757                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x1F;
  1758   00F6DA  0E1F               	movlw	31
  1759   00F6DC  6EC6               	movwf	198,c	;volatile
  1760                           
  1761                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xE0;
  1762   00F6DE  0EE0               	movlw	224
  1763   00F6E0  6EC7               	movwf	199,c	;volatile
  1764                           
  1765                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x57;
  1766   00F6E2  0E57               	movlw	87
  1767   00F6E4  6EC8               	movwf	200,c	;volatile
  1768                           
  1769                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xAF;
  1770   00F6E6  0EAF               	movlw	175
  1771   00F6E8  0104               	movlb	4	; () banked
  1772   00F6EA  6F10               	movwf	16,b	;volatile
  1773                           
  1774                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x60;
  1775   00F6EC  0E60               	movlw	96
  1776   00F6EE  6F08               	movwf	8,b	;volatile
  1777                           
  1778                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x07;
  1779   00F6F0  0E07               	movlw	7
  1780   00F6F2  6F00               	movwf	0,b	;volatile
  1781                           
  1782                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x80;
  1783   00F6F4  0E80               	movlw	128
  1784   00F6F6  6F09               	movwf	9,b	;volatile
  1785                           
  1786                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x10;
  1787   00F6F8  0E10               	movlw	16
  1788   00F6FA  6F01               	movwf	1,b	;volatile
  1789                           
  1790                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x50;
  1791   00F6FC  0E50               	movlw	80
  1792   00F6FE  6F11               	movwf	17,b	;volatile
  1793                           
  1794                           ;mcc_generated_files/pin_manager.c: 88:     ODCONA = 0x00;
  1795   00F700  0E00               	movlw	0
  1796   00F702  6F02               	movwf	2,b	;volatile
  1797                           
  1798                           ;mcc_generated_files/pin_manager.c: 89:     ODCONB = 0x00;
  1799   00F704  0E00               	movlw	0
  1800   00F706  6F0A               	movwf	10,b	;volatile
  1801                           
  1802                           ;mcc_generated_files/pin_manager.c: 90:     ODCONC = 0x00;
  1803   00F708  0E00               	movlw	0
  1804   00F70A  6F12               	movwf	18,b	;volatile
  1805                           
  1806                           ;mcc_generated_files/pin_manager.c: 95:     SLRCONA = 0x37;
  1807   00F70C  0E37               	movlw	55
  1808   00F70E  6F03               	movwf	3,b	;volatile
  1809                           
  1810                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONB = 0xF0;
  1811   00F710  0EF0               	movlw	240
  1812   00F712  6F0B               	movwf	11,b	;volatile
  1813   00F714                     
  1814                           ; BSR set to: 4
  1815                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONC = 0xFF;
  1816   00F714  6913               	setf	19,b	;volatile
  1817                           
  1818                           ;mcc_generated_files/pin_manager.c: 102:     INLVLA = 0x3F;
  1819   00F716  0E3F               	movlw	63
  1820   00F718  6F04               	movwf	4,b	;volatile
  1821                           
  1822                           ;mcc_generated_files/pin_manager.c: 103:     INLVLB = 0xF0;
  1823   00F71A  0EF0               	movlw	240
  1824   00F71C  6F0C               	movwf	12,b	;volatile
  1825   00F71E                     
  1826                           ; BSR set to: 4
  1827                           ;mcc_generated_files/pin_manager.c: 104:     INLVLC = 0xFF;
  1828   00F71E  6914               	setf	20,b	;volatile
  1829   00F720                     
  1830                           ; BSR set to: 4
  1831   00F720  0012               	return		;funcret
  1832   00F722                     __end_of_PIN_MANAGER_Initialize:
  1833                           	callstack 0
  1834                           
  1835 ;; *************** function _OSCILLATOR_Initialize *****************
  1836 ;; Defined at:
  1837 ;;		line 58 in file "mcc_generated_files/mcc.c"
  1838 ;; Parameters:    Size  Location     Type
  1839 ;;		None
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;		None
  1842 ;; Return value:  Size  Location     Type
  1843 ;;                  1    wreg      void 
  1844 ;; Registers used:
  1845 ;;		wreg, status,2
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14  BANK15  BANK1
      +6  BANK17  BANK18  BANK19  BANK20  BANK21
  1851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1855 ;;Total ram usage:        0 bytes
  1856 ;; Hardware stack levels used: 1
  1857 ;; This function calls:
  1858 ;;		Nothing
  1859 ;; This function is called by:
  1860 ;;		_SYSTEM_Initialize
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864                           	psect	text7
  1865   00F624                     __ptext7:
  1866                           	callstack 0
  1867   00F624                     _OSCILLATOR_Initialize:
  1868                           	callstack 126
  1869   00F624                     
  1870                           ;mcc_generated_files/mcc.c: 61:     OSCCON1 = 0x60;
  1871   00F624  0E60               	movlw	96
  1872   00F626  0100               	movlb	0	; () banked
  1873   00F628  6FAD               	movwf	173,b	;volatile
  1874                           
  1875                           ;mcc_generated_files/mcc.c: 63:     OSCCON3 = 0x00;
  1876   00F62A  0E00               	movlw	0
  1877   00F62C  6FAF               	movwf	175,b	;volatile
  1878                           
  1879                           ;mcc_generated_files/mcc.c: 65:     OSCEN = 0x00;
  1880   00F62E  0E00               	movlw	0
  1881   00F630  6FB3               	movwf	179,b	;volatile
  1882                           
  1883                           ;mcc_generated_files/mcc.c: 67:     OSCFRQ = 0x08;
  1884   00F632  0E08               	movlw	8
  1885   00F634  6FB1               	movwf	177,b	;volatile
  1886                           
  1887                           ;mcc_generated_files/mcc.c: 69:     OSCTUNE = 0x00;
  1888   00F636  0E00               	movlw	0
  1889   00F638  6FB0               	movwf	176,b	;volatile
  1890                           
  1891                           ;mcc_generated_files/mcc.c: 71:     ACTCON = 0x00;
  1892   00F63A  0E00               	movlw	0
  1893   00F63C  6FAC               	movwf	172,b	;volatile
  1894   00F63E                     
  1895                           ; BSR set to: 0
  1896   00F63E  0012               	return		;funcret
  1897   00F640                     __end_of_OSCILLATOR_Initialize:
  1898                           	callstack 0
  1899                           
  1900 ;; *************** function _ADCC_Initialize *****************
  1901 ;; Defined at:
  1902 ;;		line 62 in file "mcc_generated_files/adcc.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;		None
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;		None
  1907 ;; Return value:  Size  Location     Type
  1908 ;;                  1    wreg      void 
  1909 ;; Registers used:
  1910 ;;		wreg, status,2
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14  BANK15  BANK1
      +6  BANK17  BANK18  BANK19  BANK20  BANK21
  1916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1920 ;;Total ram usage:        0 bytes
  1921 ;; Hardware stack levels used: 1
  1922 ;; This function calls:
  1923 ;;		Nothing
  1924 ;; This function is called by:
  1925 ;;		_SYSTEM_Initialize
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           	psect	text8
  1930   00F722                     __ptext8:
  1931                           	callstack 0
  1932   00F722                     _ADCC_Initialize:
  1933                           	callstack 126
  1934   00F722                     
  1935                           ;mcc_generated_files/adcc.c: 66:     ADLTHL = 0x00;
  1936   00F722  0E00               	movlw	0
  1937   00F724  0103               	movlb	3	; () banked
  1938   00F726  6FD9               	movwf	217,b	;volatile
  1939                           
  1940                           ;mcc_generated_files/adcc.c: 68:     ADLTHH = 0x00;
  1941   00F728  0E00               	movlw	0
  1942   00F72A  6FDA               	movwf	218,b	;volatile
  1943                           
  1944                           ;mcc_generated_files/adcc.c: 70:     ADUTHL = 0x00;
  1945   00F72C  0E00               	movlw	0
  1946   00F72E  6FDB               	movwf	219,b	;volatile
  1947                           
  1948                           ;mcc_generated_files/adcc.c: 72:     ADUTHH = 0x00;
  1949   00F730  0E00               	movlw	0
  1950   00F732  6FDC               	movwf	220,b	;volatile
  1951                           
  1952                           ;mcc_generated_files/adcc.c: 74:     ADSTPTL = 0x00;
  1953   00F734  0E00               	movlw	0
  1954   00F736  6FDF               	movwf	223,b	;volatile
  1955                           
  1956                           ;mcc_generated_files/adcc.c: 76:     ADSTPTH = 0x00;
  1957   00F738  0E00               	movlw	0
  1958   00F73A  6FE0               	movwf	224,b	;volatile
  1959                           
  1960                           ;mcc_generated_files/adcc.c: 78:     ADACCU = 0x00;
  1961   00F73C  0E00               	movlw	0
  1962   00F73E  6FE5               	movwf	229,b	;volatile
  1963                           
  1964                           ;mcc_generated_files/adcc.c: 80:     ADRPT = 0x00;
  1965   00F740  0E00               	movlw	0
  1966   00F742  6FE7               	movwf	231,b	;volatile
  1967                           
  1968                           ;mcc_generated_files/adcc.c: 82:     ADPCH = 0x00;
  1969   00F744  0E00               	movlw	0
  1970   00F746  6FEC               	movwf	236,b	;volatile
  1971                           
  1972                           ;mcc_generated_files/adcc.c: 84:     ADACQL = 0x00;
  1973   00F748  0E00               	movlw	0
  1974   00F74A  6FEE               	movwf	238,b	;volatile
  1975                           
  1976                           ;mcc_generated_files/adcc.c: 86:     ADACQH = 0x00;
  1977   00F74C  0E00               	movlw	0
  1978   00F74E  6FEF               	movwf	239,b	;volatile
  1979                           
  1980                           ;mcc_generated_files/adcc.c: 88:     ADCAP = 0x00;
  1981   00F750  0E00               	movlw	0
  1982   00F752  6FF0               	movwf	240,b	;volatile
  1983                           
  1984                           ;mcc_generated_files/adcc.c: 90:     ADPREL = 0x00;
  1985   00F754  0E00               	movlw	0
  1986   00F756  6FF1               	movwf	241,b	;volatile
  1987                           
  1988                           ;mcc_generated_files/adcc.c: 92:     ADPREH = 0x00;
  1989   00F758  0E00               	movlw	0
  1990   00F75A  6FF2               	movwf	242,b	;volatile
  1991                           
  1992                           ;mcc_generated_files/adcc.c: 94:     ADCON1 = 0x00;
  1993   00F75C  0E00               	movlw	0
  1994   00F75E  6FF4               	movwf	244,b	;volatile
  1995                           
  1996                           ;mcc_generated_files/adcc.c: 96:     ADCON2 = 0x10;
  1997   00F760  0E10               	movlw	16
  1998   00F762  6FF5               	movwf	245,b	;volatile
  1999                           
  2000                           ;mcc_generated_files/adcc.c: 98:     ADCON3 = 0x00;
  2001   00F764  0E00               	movlw	0
  2002   00F766  6FF6               	movwf	246,b	;volatile
  2003                           
  2004                           ;mcc_generated_files/adcc.c: 100:     ADSTAT = 0x00;
  2005   00F768  0E00               	movlw	0
  2006   00F76A  6FF7               	movwf	247,b	;volatile
  2007                           
  2008                           ;mcc_generated_files/adcc.c: 102:     ADREF = 0x00;
  2009   00F76C  0E00               	movlw	0
  2010   00F76E  6FF8               	movwf	248,b	;volatile
  2011                           
  2012                           ;mcc_generated_files/adcc.c: 104:     ADACT = 0x00;
  2013   00F770  0E00               	movlw	0
  2014   00F772  6FF9               	movwf	249,b	;volatile
  2015                           
  2016                           ;mcc_generated_files/adcc.c: 106:     ADCLK = 0x1F;
  2017   00F774  0E1F               	movlw	31
  2018   00F776  6FFA               	movwf	250,b	;volatile
  2019                           
  2020                           ;mcc_generated_files/adcc.c: 108:     ADCON0 = 0x84;
  2021   00F778  0E84               	movlw	132
  2022   00F77A  6FF3               	movwf	243,b	;volatile
  2023   00F77C                     
  2024                           ; BSR set to: 3
  2025   00F77C  0012               	return		;funcret
  2026   00F77E                     __end_of_ADCC_Initialize:
  2027                           	callstack 0
  2028                           
  2029 ;; *************** function _LOOPDELAY_Init *****************
  2030 ;; Defined at:
  2031 ;;		line 23 in file "Loopdelay.c"
  2032 ;; Parameters:    Size  Location     Type
  2033 ;;  newLoopTimeM    2    0[COMRAM] unsigned short 
  2034 ;; Auto vars:     Size  Location     Type
  2035 ;;		None
  2036 ;; Return value:  Size  Location     Type
  2037 ;;                  1    wreg      void 
  2038 ;; Registers used:
  2039 ;;		None
  2040 ;; Tracked objects:
  2041 ;;		On entry : 0/0
  2042 ;;		On exit  : 0/0
  2043 ;;		Unchanged: 0/0
  2044 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14  BANK15  BANK1
      +6  BANK17  BANK18  BANK19  BANK20  BANK21
  2045 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2048 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2049 ;;Total ram usage:        2 bytes
  2050 ;; Hardware stack levels used: 1
  2051 ;; This function calls:
  2052 ;;		Nothing
  2053 ;; This function is called by:
  2054 ;;		_main
  2055 ;; This function uses a non-reentrant model
  2056 ;;
  2057                           
  2058                           	psect	text9
  2059   00F5CC                     __ptext9:
  2060                           	callstack 0
  2061   00F5CC                     _LOOPDELAY_Init:
  2062                           	callstack 127
  2063   00F5CC                     
  2064                           ;Loopdelay.c: 23: void LOOPDELAY_Init(uint16_t newLoopTimeMS);Loopdelay.c: 24: {;Loopdel
      +                          ay.c: 25:     loopTimeMS = newLoopTimeMS;
  2065   00F5CC  C501  F550         	movff	LOOPDELAY_Init@newLoopTimeMS,_loopTimeMS
  2066   00F5D0  C502  F551         	movff	LOOPDELAY_Init@newLoopTimeMS+1,_loopTimeMS+1
  2067   00F5D4  0012               	return		;funcret
  2068   00F5D6                     __end_of_LOOPDELAY_Init:
  2069                           	callstack 0
  2070                           
  2071 ;; *************** function _LED_WriteFull *****************
  2072 ;; Defined at:
  2073 ;;		line 79 in file "DivFunctions.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;  red             1    wreg     unsigned char 
  2076 ;;  green           1   10[COMRAM] unsigned char 
  2077 ;;  blue            1   11[COMRAM] unsigned char 
  2078 ;;  ledcount        3   12[COMRAM] unsigned um
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;  red             1   15[COMRAM] unsigned char 
  2081 ;;  i               1   19[COMRAM] unsigned char 
  2082 ;;  x               3   16[COMRAM] unsigned um
  2083 ;; Return value:  Size  Location     Type
  2084 ;;                  1    wreg      void 
  2085 ;; Registers used:
  2086 ;;		wreg, status,2, status,0, cstack
  2087 ;; Tracked objects:
  2088 ;;		On entry : 0/0
  2089 ;;		On exit  : 0/0
  2090 ;;		Unchanged: 0/0
  2091 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14  BANK15  BANK1
      +6  BANK17  BANK18  BANK19  BANK20  BANK21
  2092 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2093 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2095 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2096 ;;Total ram usage:       10 bytes
  2097 ;; Hardware stack levels used: 1
  2098 ;; Hardware stack levels required when called: 3
  2099 ;; This function calls:
  2100 ;;		_WS2812B_Write
  2101 ;;		___ltdiv
  2102 ;; This function is called by:
  2103 ;;		_main
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           	psect	text10
  2108   00F7E8                     __ptext10:
  2109                           	callstack 0
  2110   00F7E8                     _LED_WriteFull:
  2111                           	callstack 124
  2112                           
  2113                           ;incstack = 0
  2114                           ;LED_WriteFull@red stored from wreg
  2115   00F7E8  6E10               	movwf	LED_WriteFull@red^(0+1280),c
  2116   00F7EA                     
  2117                           ;DivFunctions.c: 79: void LED_WriteFull(uint8_t red, uint8_t green, uint8_t blue, uint24
      +                          _t ledcount);DivFunctions.c: 80: {;DivFunctions.c: 81:     for(uint24_t x = 0; x <= (led
      +                          count/20); x++)
  2118   00F7EA  0E00               	movlw	0
  2119   00F7EC  6E11               	movwf	LED_WriteFull@x^(0+1280),c
  2120   00F7EE  0E00               	movlw	0
  2121   00F7F0  6E12               	movwf	(LED_WriteFull@x+1)^(0+1280),c
  2122   00F7F2  0E00               	movlw	0
  2123   00F7F4  6E13               	movwf	(LED_WriteFull@x+2)^(0+1280),c
  2124   00F7F6  EF15  F07C         	goto	l1798
  2125   00F7FA                     l1786:
  2126                           
  2127                           ;DivFunctions.c: 82:     {;DivFunctions.c: 83:         for(uint8_t i=0; i <= 20; i++)
  2128   00F7FA  0E00               	movlw	0
  2129   00F7FC  6E14               	movwf	LED_WriteFull@i^(0+1280),c
  2130   00F7FE                     l1792:
  2131                           
  2132                           ;DivFunctions.c: 84:         {;DivFunctions.c: 85:             WS2812B_Write(red, green,
      +                           blue);
  2133   00F7FE  C50B  F502         	movff	LED_WriteFull@green,WS2812B_Write@G
  2134   00F802  C50C  F503         	movff	LED_WriteFull@blue,WS2812B_Write@B
  2135   00F806  5010               	movf	LED_WriteFull@red^(0+1280),w,c
  2136   00F808  ECFB  F07A         	call	_WS2812B_Write
  2137   00F80C                     
  2138                           ;DivFunctions.c: 86:         }
  2139   00F80C  2A14               	incf	LED_WriteFull@i^(0+1280),f,c
  2140   00F80E  0E14               	movlw	20
  2141   00F810  6414               	cpfsgt	LED_WriteFull@i^(0+1280),c
  2142   00F812  EF0D  F07C         	goto	u641
  2143   00F816  EF0F  F07C         	goto	u640
  2144   00F81A                     u641:
  2145   00F81A  EFFF  F07B         	goto	l1792
  2146   00F81E                     u640:
  2147   00F81E                     
  2148                           ;DivFunctions.c: 88:     }
  2149   00F81E  0E01               	movlw	1
  2150   00F820  2611               	addwf	LED_WriteFull@x^(0+1280),f,c
  2151   00F822  0E00               	movlw	0
  2152   00F824  2212               	addwfc	(LED_WriteFull@x+1)^(0+1280),f,c
  2153   00F826  0E00               	movlw	0
  2154   00F828  2213               	addwfc	(LED_WriteFull@x+2)^(0+1280),f,c
  2155   00F82A                     l1798:
  2156   00F82A  C50D  F501         	movff	LED_WriteFull@ledcount,___ltdiv@dividend
  2157   00F82E  C50E  F502         	movff	LED_WriteFull@ledcount+1,___ltdiv@dividend+1
  2158   00F832  C50F  F503         	movff	LED_WriteFull@ledcount+2,___ltdiv@dividend+2
  2159   00F836  0E14               	movlw	20
  2160   00F838  6E04               	movwf	___ltdiv@divisor^(0+1280),c
  2161   00F83A  0E00               	movlw	0
  2162   00F83C  6E05               	movwf	(___ltdiv@divisor+1)^(0+1280),c
  2163   00F83E  0E00               	movlw	0
  2164   00F840  6E06               	movwf	(___ltdiv@divisor+2)^(0+1280),c
  2165   00F842  EC6E  F07C         	call	___ltdiv	;wreg free
  2166   00F846  5011               	movf	LED_WriteFull@x^(0+1280),w,c
  2167   00F848  5C01               	subwf	?___ltdiv^(0+1280),w,c
  2168   00F84A  5012               	movf	(LED_WriteFull@x+1)^(0+1280),w,c
  2169   00F84C  5802               	subwfb	(?___ltdiv+1)^(0+1280),w,c
  2170   00F84E  5013               	movf	(LED_WriteFull@x+2)^(0+1280),w,c
  2171   00F850  5803               	subwfb	(?___ltdiv+2)^(0+1280),w,c
  2172   00F852  B0D8               	btfsc	status,0,c
  2173   00F854  EF2E  F07C         	goto	u651
  2174   00F858  EF30  F07C         	goto	u650
  2175   00F85C                     u651:
  2176   00F85C  EFFD  F07B         	goto	l1786
  2177   00F860                     u650:
  2178   00F860  0012               	return		;funcret
  2179   00F862                     __end_of_LED_WriteFull:
  2180                           	callstack 0
  2181                           
  2182 ;; *************** function ___ltdiv *****************
  2183 ;; Defined at:
  2184 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\ltdiv.c"
  2185 ;; Parameters:    Size  Location     Type
  2186 ;;  dividend        3    0[COMRAM] unsigned um
  2187 ;;  divisor         3    3[COMRAM] unsigned um
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;  quotient        3    6[COMRAM] unsigned um
  2190 ;;  counter         1    9[COMRAM] unsigned char 
  2191 ;; Return value:  Size  Location     Type
  2192 ;;                  3    0[COMRAM] unsigned um
  2193 ;; Registers used:
  2194 ;;		wreg, status,2, status,0
  2195 ;; Tracked objects:
  2196 ;;		On entry : 0/0
  2197 ;;		On exit  : 0/0
  2198 ;;		Unchanged: 0/0
  2199 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14  BANK15  BANK1
      +6  BANK17  BANK18  BANK19  BANK20  BANK21
  2200 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2201 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2203 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2204 ;;Total ram usage:       10 bytes
  2205 ;; Hardware stack levels used: 1
  2206 ;; This function calls:
  2207 ;;		Nothing
  2208 ;; This function is called by:
  2209 ;;		_LED_WriteFull
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           	psect	text11
  2214   00F8DC                     __ptext11:
  2215                           	callstack 0
  2216   00F8DC                     ___ltdiv:
  2217                           	callstack 126
  2218   00F8DC  0E00               	movlw	0
  2219   00F8DE  6E07               	movwf	___ltdiv@quotient^(0+1280),c
  2220   00F8E0  0E00               	movlw	0
  2221   00F8E2  6E08               	movwf	(___ltdiv@quotient+1)^(0+1280),c
  2222   00F8E4  0E00               	movlw	0
  2223   00F8E6  6E09               	movwf	(___ltdiv@quotient+2)^(0+1280),c
  2224   00F8E8  5004               	movf	___ltdiv@divisor^(0+1280),w,c
  2225   00F8EA  1005               	iorwf	(___ltdiv@divisor+1)^(0+1280),w,c
  2226   00F8EC  1006               	iorwf	(___ltdiv@divisor+2)^(0+1280),w,c
  2227   00F8EE  B4D8               	btfsc	status,2,c
  2228   00F8F0  EF7C  F07C         	goto	u601
  2229   00F8F4  EF7E  F07C         	goto	u600
  2230   00F8F8                     u601:
  2231   00F8F8  EFAD  F07C         	goto	l909
  2232   00F8FC                     u600:
  2233   00F8FC  0E01               	movlw	1
  2234   00F8FE  6E0A               	movwf	___ltdiv@counter^(0+1280),c
  2235   00F900  EF87  F07C         	goto	l1746
  2236   00F904                     l1744:
  2237   00F904  90D8               	bcf	status,0,c
  2238   00F906  3604               	rlcf	___ltdiv@divisor^(0+1280),f,c
  2239   00F908  3605               	rlcf	(___ltdiv@divisor+1)^(0+1280),f,c
  2240   00F90A  3606               	rlcf	(___ltdiv@divisor+2)^(0+1280),f,c
  2241   00F90C  2A0A               	incf	___ltdiv@counter^(0+1280),f,c
  2242   00F90E                     l1746:
  2243   00F90E  AE06               	btfss	(___ltdiv@divisor+2)^(0+1280),7,c
  2244   00F910  EF8C  F07C         	goto	u611
  2245   00F914  EF8E  F07C         	goto	u610
  2246   00F918                     u611:
  2247   00F918  EF82  F07C         	goto	l1744
  2248   00F91C                     u610:
  2249   00F91C                     l1748:
  2250   00F91C  90D8               	bcf	status,0,c
  2251   00F91E  3607               	rlcf	___ltdiv@quotient^(0+1280),f,c
  2252   00F920  3608               	rlcf	(___ltdiv@quotient+1)^(0+1280),f,c
  2253   00F922  3609               	rlcf	(___ltdiv@quotient+2)^(0+1280),f,c
  2254   00F924  5004               	movf	___ltdiv@divisor^(0+1280),w,c
  2255   00F926  5C01               	subwf	___ltdiv@dividend^(0+1280),w,c
  2256   00F928  5005               	movf	(___ltdiv@divisor+1)^(0+1280),w,c
  2257   00F92A  5802               	subwfb	(___ltdiv@dividend+1)^(0+1280),w,c
  2258   00F92C  5006               	movf	(___ltdiv@divisor+2)^(0+1280),w,c
  2259   00F92E  5803               	subwfb	(___ltdiv@dividend+2)^(0+1280),w,c
  2260   00F930  A0D8               	btfss	status,0,c
  2261   00F932  EF9D  F07C         	goto	u621
  2262   00F936  EF9F  F07C         	goto	u620
  2263   00F93A                     u621:
  2264   00F93A  EFA6  F07C         	goto	l914
  2265   00F93E                     u620:
  2266   00F93E  5004               	movf	___ltdiv@divisor^(0+1280),w,c
  2267   00F940  5E01               	subwf	___ltdiv@dividend^(0+1280),f,c
  2268   00F942  5005               	movf	(___ltdiv@divisor+1)^(0+1280),w,c
  2269   00F944  5A02               	subwfb	(___ltdiv@dividend+1)^(0+1280),f,c
  2270   00F946  5006               	movf	(___ltdiv@divisor+2)^(0+1280),w,c
  2271   00F948  5A03               	subwfb	(___ltdiv@dividend+2)^(0+1280),f,c
  2272   00F94A  8007               	bsf	___ltdiv@quotient^(0+1280),0,c
  2273   00F94C                     l914:
  2274   00F94C  90D8               	bcf	status,0,c
  2275   00F94E  3206               	rrcf	(___ltdiv@divisor+2)^(0+1280),f,c
  2276   00F950  3205               	rrcf	(___ltdiv@divisor+1)^(0+1280),f,c
  2277   00F952  3204               	rrcf	___ltdiv@divisor^(0+1280),f,c
  2278   00F954  2E0A               	decfsz	___ltdiv@counter^(0+1280),f,c
  2279   00F956  EF8E  F07C         	goto	l1748
  2280   00F95A                     l909:
  2281   00F95A  C507  F501         	movff	___ltdiv@quotient,?___ltdiv
  2282   00F95E  C508  F502         	movff	___ltdiv@quotient+1,?___ltdiv+1
  2283   00F962  C509  F503         	movff	___ltdiv@quotient+2,?___ltdiv+2
  2284   00F966  0012               	return		;funcret
  2285   00F968                     __end_of___ltdiv:
  2286                           	callstack 0
  2287                           
  2288 ;; *************** function _WS2812B_Write *****************
  2289 ;; Defined at:
  2290 ;;		line 3 in file "DivFunctions.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;  R               1    wreg     unsigned char 
  2293 ;;  G               1    1[COMRAM] unsigned char 
  2294 ;;  B               1    2[COMRAM] unsigned char 
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;  R               1    3[COMRAM] unsigned char 
  2297 ;; Return value:  Size  Location     Type
  2298 ;;                  1    wreg      void 
  2299 ;; Registers used:
  2300 ;;		wreg, status,2, cstack
  2301 ;; Tracked objects:
  2302 ;;		On entry : 0/0
  2303 ;;		On exit  : 0/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14  BANK15  BANK1
      +6  BANK17  BANK18  BANK19  BANK20  BANK21
  2306 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2307 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2309 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2310 ;;Total ram usage:        3 bytes
  2311 ;; Hardware stack levels used: 1
  2312 ;; Hardware stack levels required when called: 2
  2313 ;; This function calls:
  2314 ;;		_ws_send_byte
  2315 ;; This function is called by:
  2316 ;;		_LED_WriteFull
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           	psect	text12
  2321   00F5F6                     __ptext12:
  2322                           	callstack 0
  2323   00F5F6                     _WS2812B_Write:
  2324                           	callstack 124
  2325                           
  2326                           ;incstack = 0
  2327                           ;WS2812B_Write@R stored from wreg
  2328   00F5F6  6E04               	movwf	WS2812B_Write@R^(0+1280),c
  2329   00F5F8                     
  2330                           ;DivFunctions.c: 3: void WS2812B_Write(uint8_t R, uint8_t G, uint8_t B);DivFunctions.c: 
      +                          4: {;DivFunctions.c: 5:     ws_send_byte(R);
  2331   00F5F8  5004               	movf	WS2812B_Write@R^(0+1280),w,c
  2332   00F5FA  ECB4  F07C         	call	_ws_send_byte
  2333                           
  2334                           ;DivFunctions.c: 6:     ws_send_byte(G);
  2335   00F5FE  5002               	movf	WS2812B_Write@G^(0+1280),w,c
  2336   00F600  ECB4  F07C         	call	_ws_send_byte
  2337                           
  2338                           ;DivFunctions.c: 7:     ws_send_byte(B);
  2339   00F604  5003               	movf	WS2812B_Write@B^(0+1280),w,c
  2340   00F606  ECB4  F07C         	call	_ws_send_byte
  2341   00F60A  0012               	return		;funcret
  2342   00F60C                     __end_of_WS2812B_Write:
  2343                           	callstack 0
  2344                           
  2345 ;; *************** function _ws_send_byte *****************
  2346 ;; Defined at:
  2347 ;;		line 52 in file "DivFunctions.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;  K               1    wreg     unsigned char 
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;  K               1    0[COMRAM] unsigned char 
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      void 
  2354 ;; Registers used:
  2355 ;;		wreg, cstack
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14  BANK15  BANK1
      +6  BANK17  BANK18  BANK19  BANK20  BANK21
  2361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2362 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2364 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2365 ;;Total ram usage:        1 bytes
  2366 ;; Hardware stack levels used: 1
  2367 ;; Hardware stack levels required when called: 1
  2368 ;; This function calls:
  2369 ;;		_onePulse
  2370 ;;		_zeroPulse
  2371 ;; This function is called by:
  2372 ;;		_WS2812B_Write
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376                           	psect	text13
  2377   00F968                     __ptext13:
  2378                           	callstack 0
  2379   00F968                     _ws_send_byte:
  2380                           	callstack 124
  2381                           
  2382                           ;incstack = 0
  2383                           ;ws_send_byte@K stored from wreg
  2384   00F968  6E01               	movwf	ws_send_byte@K^(0+1280),c
  2385   00F96A                     
  2386                           ;DivFunctions.c: 52: void ws_send_byte(uint8_t K);DivFunctions.c: 53: {;DivFunctions.c: 
      +                          54:     if(K & 0b10000000) {onePulse();}
  2387   00F96A  AE01               	btfss	ws_send_byte@K^(0+1280),7,c
  2388   00F96C  EFBA  F07C         	goto	u11
  2389   00F970  EFBC  F07C         	goto	u10
  2390   00F974                     u11:
  2391   00F974  EFC0  F07C         	goto	l1124
  2392   00F978                     u10:
  2393   00F978  EC2E  F07B         	call	_onePulse	;wreg free
  2394   00F97C  EFC2  F07C         	goto	l1126
  2395   00F980                     l1124:
  2396   00F980  EC3D  F07B         	call	_zeroPulse	;wreg free
  2397   00F984                     l1126:
  2398                           
  2399                           ;DivFunctions.c: 57:     if(K & 0b01000000) {onePulse();}
  2400   00F984  AC01               	btfss	ws_send_byte@K^(0+1280),6,c
  2401   00F986  EFC7  F07C         	goto	u21
  2402   00F98A  EFC9  F07C         	goto	u20
  2403   00F98E                     u21:
  2404   00F98E  EFCD  F07C         	goto	l1130
  2405   00F992                     u20:
  2406   00F992  EC2E  F07B         	call	_onePulse	;wreg free
  2407   00F996  EFCF  F07C         	goto	l1132
  2408   00F99A                     l1130:
  2409   00F99A  EC3D  F07B         	call	_zeroPulse	;wreg free
  2410   00F99E                     l1132:
  2411                           
  2412                           ;DivFunctions.c: 60:     if(K & 0b00100000) {onePulse();}
  2413   00F99E  AA01               	btfss	ws_send_byte@K^(0+1280),5,c
  2414   00F9A0  EFD4  F07C         	goto	u31
  2415   00F9A4  EFD6  F07C         	goto	u30
  2416   00F9A8                     u31:
  2417   00F9A8  EFDA  F07C         	goto	l1136
  2418   00F9AC                     u30:
  2419   00F9AC  EC2E  F07B         	call	_onePulse	;wreg free
  2420   00F9B0  EFDC  F07C         	goto	l1138
  2421   00F9B4                     l1136:
  2422   00F9B4  EC3D  F07B         	call	_zeroPulse	;wreg free
  2423   00F9B8                     l1138:
  2424                           
  2425                           ;DivFunctions.c: 63:     if(K & 0b00010000) {onePulse();}
  2426   00F9B8  A801               	btfss	ws_send_byte@K^(0+1280),4,c
  2427   00F9BA  EFE1  F07C         	goto	u41
  2428   00F9BE  EFE3  F07C         	goto	u40
  2429   00F9C2                     u41:
  2430   00F9C2  EFE7  F07C         	goto	l1142
  2431   00F9C6                     u40:
  2432   00F9C6  EC2E  F07B         	call	_onePulse	;wreg free
  2433   00F9CA  EFE9  F07C         	goto	l1144
  2434   00F9CE                     l1142:
  2435   00F9CE  EC3D  F07B         	call	_zeroPulse	;wreg free
  2436   00F9D2                     l1144:
  2437                           
  2438                           ;DivFunctions.c: 66:     if(K & 0b00001000) {onePulse();}
  2439   00F9D2  A601               	btfss	ws_send_byte@K^(0+1280),3,c
  2440   00F9D4  EFEE  F07C         	goto	u51
  2441   00F9D8  EFF0  F07C         	goto	u50
  2442   00F9DC                     u51:
  2443   00F9DC  EFF4  F07C         	goto	l1148
  2444   00F9E0                     u50:
  2445   00F9E0  EC2E  F07B         	call	_onePulse	;wreg free
  2446   00F9E4  EFF6  F07C         	goto	l1150
  2447   00F9E8                     l1148:
  2448   00F9E8  EC3D  F07B         	call	_zeroPulse	;wreg free
  2449   00F9EC                     l1150:
  2450                           
  2451                           ;DivFunctions.c: 69:     if(K & 0b00000100) {onePulse();}
  2452   00F9EC  A401               	btfss	ws_send_byte@K^(0+1280),2,c
  2453   00F9EE  EFFB  F07C         	goto	u61
  2454   00F9F2  EFFD  F07C         	goto	u60
  2455   00F9F6                     u61:
  2456   00F9F6  EF01  F07D         	goto	l1154
  2457   00F9FA                     u60:
  2458   00F9FA  EC2E  F07B         	call	_onePulse	;wreg free
  2459   00F9FE  EF03  F07D         	goto	l1156
  2460   00FA02                     l1154:
  2461   00FA02  EC3D  F07B         	call	_zeroPulse	;wreg free
  2462   00FA06                     l1156:
  2463                           
  2464                           ;DivFunctions.c: 72:     if(K & 0b00000010) {onePulse();}
  2465   00FA06  A201               	btfss	ws_send_byte@K^(0+1280),1,c
  2466   00FA08  EF08  F07D         	goto	u71
  2467   00FA0C  EF0A  F07D         	goto	u70
  2468   00FA10                     u71:
  2469   00FA10  EF0E  F07D         	goto	l1160
  2470   00FA14                     u70:
  2471   00FA14  EC2E  F07B         	call	_onePulse	;wreg free
  2472   00FA18  EF10  F07D         	goto	l1162
  2473   00FA1C                     l1160:
  2474   00FA1C  EC3D  F07B         	call	_zeroPulse	;wreg free
  2475   00FA20                     l1162:
  2476                           
  2477                           ;DivFunctions.c: 75:     if(K & 0b00000001) {onePulse();}
  2478   00FA20  A001               	btfss	ws_send_byte@K^(0+1280),0,c
  2479   00FA22  EF15  F07D         	goto	u81
  2480   00FA26  EF17  F07D         	goto	u80
  2481   00FA2A                     u81:
  2482   00FA2A  EF1B  F07D         	goto	l1166
  2483   00FA2E                     u80:
  2484   00FA2E  EC2E  F07B         	call	_onePulse	;wreg free
  2485   00FA32  EF1D  F07D         	goto	l415
  2486   00FA36                     l1166:
  2487   00FA36  EC3D  F07B         	call	_zeroPulse	;wreg free
  2488   00FA3A                     l415:
  2489   00FA3A  0012               	return		;funcret
  2490   00FA3C                     __end_of_ws_send_byte:
  2491                           	callstack 0
  2492                           
  2493 ;; *************** function _zeroPulse *****************
  2494 ;; Defined at:
  2495 ;;		line 32 in file "DivFunctions.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;		None
  2498 ;; Auto vars:     Size  Location     Type
  2499 ;;		None
  2500 ;; Return value:  Size  Location     Type
  2501 ;;                  1    wreg      void 
  2502 ;; Registers used:
  2503 ;;		None
  2504 ;; Tracked objects:
  2505 ;;		On entry : 0/0
  2506 ;;		On exit  : 0/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14  BANK15  BANK1
      +6  BANK17  BANK18  BANK19  BANK20  BANK21
  2509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2513 ;;Total ram usage:        0 bytes
  2514 ;; Hardware stack levels used: 1
  2515 ;; This function calls:
  2516 ;;		Nothing
  2517 ;; This function is called by:
  2518 ;;		_ws_send_byte
  2519 ;; This function uses a non-reentrant model
  2520 ;;
  2521                           
  2522                           	psect	text14
  2523   00F67A                     __ptext14:
  2524                           	callstack 0
  2525   00F67A                     _zeroPulse:
  2526                           	callstack 124
  2527   00F67A                     
  2528                           ;DivFunctions.c: 34:     LATBbits.LATB4 = 1;
  2529   00F67A  88BF               	bsf	191,4,c	;volatile
  2530                           
  2531                           ;DivFunctions.c: 35:     __nop();
  2532   00F67C  F000               	nop	
  2533                           
  2534                           ;DivFunctions.c: 36:     __nop();
  2535   00F67E  F000               	nop	
  2536                           
  2537                           ;DivFunctions.c: 37:     __nop();
  2538   00F680  F000               	nop	
  2539                           
  2540                           ;DivFunctions.c: 38:     LATBbits.LATB4 = 0;
  2541   00F682  98BF               	bcf	191,4,c	;volatile
  2542                           
  2543                           ;DivFunctions.c: 39:     __nop();
  2544   00F684  F000               	nop	
  2545                           
  2546                           ;DivFunctions.c: 40:     __nop();
  2547   00F686  F000               	nop	
  2548                           
  2549                           ;DivFunctions.c: 41:     __nop();
  2550   00F688  F000               	nop	
  2551                           
  2552                           ;DivFunctions.c: 42:     __nop();
  2553   00F68A  F000               	nop	
  2554                           
  2555                           ;DivFunctions.c: 43:     __nop();
  2556   00F68C  F000               	nop	
  2557                           
  2558                           ;DivFunctions.c: 44:     __nop();
  2559   00F68E  F000               	nop	
  2560                           
  2561                           ;DivFunctions.c: 45:     __nop();
  2562   00F690  F000               	nop	
  2563                           
  2564                           ;DivFunctions.c: 46:     __nop();
  2565   00F692  F000               	nop	
  2566                           
  2567                           ;DivFunctions.c: 47:     __nop();
  2568   00F694  F000               	nop	
  2569                           
  2570                           ;DivFunctions.c: 48:     __nop();
  2571   00F696  F000               	nop	
  2572                           
  2573                           ;DivFunctions.c: 49:     __nop();
  2574   00F698  F000               	nop	
  2575                           
  2576                           ;DivFunctions.c: 50:     __nop();
  2577   00F69A  F000               	nop	
  2578   00F69C  0012               	return		;funcret
  2579   00F69E                     __end_of_zeroPulse:
  2580                           	callstack 0
  2581                           
  2582 ;; *************** function _onePulse *****************
  2583 ;; Defined at:
  2584 ;;		line 14 in file "DivFunctions.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;		None
  2587 ;; Auto vars:     Size  Location     Type
  2588 ;;		None
  2589 ;; Return value:  Size  Location     Type
  2590 ;;                  1    wreg      void 
  2591 ;; Registers used:
  2592 ;;		None
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 0/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14  BANK15  BANK1
      +6  BANK17  BANK18  BANK19  BANK20  BANK21
  2598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2602 ;;Total ram usage:        0 bytes
  2603 ;; Hardware stack levels used: 1
  2604 ;; This function calls:
  2605 ;;		Nothing
  2606 ;; This function is called by:
  2607 ;;		_ws_send_byte
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           	psect	text15
  2612   00F65C                     __ptext15:
  2613                           	callstack 0
  2614   00F65C                     _onePulse:
  2615                           	callstack 124
  2616   00F65C                     
  2617                           ;DivFunctions.c: 16:     LATBbits.LATB4 = 1;
  2618   00F65C  88BF               	bsf	191,4,c	;volatile
  2619                           
  2620                           ;DivFunctions.c: 17:     __nop();
  2621   00F65E  F000               	nop	
  2622                           
  2623                           ;DivFunctions.c: 18:     __nop();
  2624   00F660  F000               	nop	
  2625                           
  2626                           ;DivFunctions.c: 19:     __nop();
  2627   00F662  F000               	nop	
  2628                           
  2629                           ;DivFunctions.c: 20:     __nop();
  2630   00F664  F000               	nop	
  2631                           
  2632                           ;DivFunctions.c: 21:     __nop();
  2633   00F666  F000               	nop	
  2634                           
  2635                           ;DivFunctions.c: 22:     __nop();
  2636   00F668  F000               	nop	
  2637                           
  2638                           ;DivFunctions.c: 23:     __nop();
  2639   00F66A  F000               	nop	
  2640                           
  2641                           ;DivFunctions.c: 24:     __nop();
  2642   00F66C  F000               	nop	
  2643                           
  2644                           ;DivFunctions.c: 25:     __nop();
  2645   00F66E  F000               	nop	
  2646                           
  2647                           ;DivFunctions.c: 26:     __nop();
  2648   00F670  F000               	nop	
  2649                           
  2650                           ;DivFunctions.c: 27:     __nop();
  2651   00F672  F000               	nop	
  2652                           
  2653                           ;DivFunctions.c: 28:     __nop();
  2654   00F674  F000               	nop	
  2655                           
  2656                           ;DivFunctions.c: 29:     LATBbits.LATB4 = 0;
  2657   00F676  98BF               	bcf	191,4,c	;volatile
  2658   00F678  0012               	return		;funcret
  2659   00F67A                     __end_of_onePulse:
  2660                           	callstack 0
  2661                           
  2662 ;; *************** function _DATAEE_ReadByte *****************
  2663 ;; Defined at:
  2664 ;;		line 264 in file "mcc_generated_files/memory.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;  bAdd            2    0[COMRAM] unsigned short 
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;		None
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  1    wreg      unsigned char 
  2671 ;; Registers used:
  2672 ;;		wreg, status,2
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14  BANK15  BANK1
      +6  BANK17  BANK18  BANK19  BANK20  BANK21
  2678 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2681 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2682 ;;Total ram usage:        2 bytes
  2683 ;; Hardware stack levels used: 1
  2684 ;; This function calls:
  2685 ;;		Nothing
  2686 ;; This function is called by:
  2687 ;;		_main
  2688 ;; This function uses a non-reentrant model
  2689 ;;
  2690                           
  2691                           	psect	text16
  2692   00F60C                     __ptext16:
  2693                           	callstack 0
  2694   00F60C                     _DATAEE_ReadByte:
  2695                           	callstack 127
  2696   00F60C                     
  2697                           ;mcc_generated_files/memory.c: 264: uint8_t DATAEE_ReadByte(uint16_t bAdd);mcc_generated
      +                          _files/memory.c: 265: {;mcc_generated_files/memory.c: 267:     NVMADRU = 0x38;
  2698   00F60C  0E38               	movlw	56
  2699   00F60E  0100               	movlb	0	; () banked
  2700   00F610  6F45               	movwf	69,b	;volatile
  2701                           
  2702                           ;mcc_generated_files/memory.c: 268:     NVMADRH = (uint8_t) ((bAdd & 0xFF00) >> 8);
  2703   00F612  5002               	movf	(DATAEE_ReadByte@bAdd+1)^(0+1280),w,c
  2704   00F614  6F44               	movwf	68,b	;volatile
  2705   00F616                     
  2706                           ; BSR set to: 0
  2707                           ;mcc_generated_files/memory.c: 269:     NVMADRL = (uint8_t) (bAdd & 0x00FF);
  2708   00F616  C501  F043         	movff	DATAEE_ReadByte@bAdd,67	;volatile
  2709                           
  2710                           ;mcc_generated_files/memory.c: 272:     NVMCON1bits.NVMCMD = 0b000;
  2711   00F61A  0EF8               	movlw	-8
  2712   00F61C  1741               	andwf	65,f,b	;volsfr
  2713   00F61E                     
  2714                           ; BSR set to: 0
  2715                           ;mcc_generated_files/memory.c: 273:     NVMCON0bits.GO = 1;
  2716   00F61E  8140               	bsf	64,0,b	;volatile
  2717                           
  2718                           ;mcc_generated_files/memory.c: 275:     return NVMDATL;
  2719   00F620  5146               	movf	70,w,b	;volatile
  2720   00F622                     
  2721                           ; BSR set to: 0
  2722   00F622  0012               	return		;funcret
  2723   00F624                     __end_of_DATAEE_ReadByte:
  2724                           	callstack 0
  2725                           
  2726 ;; *************** function _ADCC_GetSingleConversion *****************
  2727 ;; Defined at:
  2728 ;;		line 137 in file "mcc_generated_files/adcc.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;  channel         1    wreg     enum E12907
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;  channel         1    4[COMRAM] enum E12907
  2733 ;; Return value:  Size  Location     Type
  2734 ;;                  2    0[COMRAM] unsigned short 
  2735 ;; Registers used:
  2736 ;;		wreg, status,2, status,0
  2737 ;; Tracked objects:
  2738 ;;		On entry : 0/0
  2739 ;;		On exit  : 0/0
  2740 ;;		Unchanged: 0/0
  2741 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14  BANK15  BANK1
      +6  BANK17  BANK18  BANK19  BANK20  BANK21
  2742 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2743 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2744 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2745 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2746 ;;Total ram usage:        5 bytes
  2747 ;; Hardware stack levels used: 1
  2748 ;; This function calls:
  2749 ;;		Nothing
  2750 ;; This function is called by:
  2751 ;;		_main
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           	psect	text17
  2756   00F69E                     __ptext17:
  2757                           	callstack 0
  2758   00F69E                     _ADCC_GetSingleConversion:
  2759                           	callstack 127
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;incstack = 0
  2763                           ;ADCC_GetSingleConversion@channel stored from wreg
  2764   00F69E  6E05               	movwf	ADCC_GetSingleConversion@channel^(0+1280),c
  2765   00F6A0                     
  2766                           ;mcc_generated_files/adcc.c: 137: adc_result_t ADCC_GetSingleConversion(adcc_channel_t c
      +                          hannel);mcc_generated_files/adcc.c: 138: {;mcc_generated_files/adcc.c: 140:     ADPCH = 
      +                          channel;
  2767   00F6A0  C505  F3EC         	movff	ADCC_GetSingleConversion@channel,1004	;volatile
  2768   00F6A4                     
  2769                           ;mcc_generated_files/adcc.c: 143:     ADCON0bits.ADON = 1;
  2770   00F6A4  0103               	movlb	3	; () banked
  2771   00F6A6  8FF3               	bsf	243,7,b	;volatile
  2772   00F6A8                     
  2773                           ; BSR set to: 3
  2774                           ;mcc_generated_files/adcc.c: 146:     ADCON0bits.ADCONT = 0;
  2775   00F6A8  9DF3               	bcf	243,6,b	;volatile
  2776   00F6AA                     
  2777                           ; BSR set to: 3
  2778                           ;mcc_generated_files/adcc.c: 149:     ADCON0bits.ADGO = 1;
  2779   00F6AA  81F3               	bsf	243,0,b	;volatile
  2780   00F6AC                     l139:
  2781                           
  2782                           ; BSR set to: 3
  2783                           ;mcc_generated_files/adcc.c: 153:     while (ADCON0bits.ADGO)
  2784   00F6AC  B1F3               	btfsc	243,0,b	;volatile
  2785   00F6AE  EF5B  F07B         	goto	u631
  2786   00F6B2  EF5D  F07B         	goto	u630
  2787   00F6B6                     u631:
  2788   00F6B6  EF56  F07B         	goto	l139
  2789   00F6BA                     u630:
  2790   00F6BA                     
  2791                           ; BSR set to: 3
  2792                           ;mcc_generated_files/adcc.c: 159:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  2793   00F6BA  51EB               	movf	235,w,b	;volatile
  2794   00F6BC  6E04               	movwf	(??_ADCC_GetSingleConversion+1)^(0+1280),c
  2795   00F6BE  6A03               	clrf	??_ADCC_GetSingleConversion^(0+1280),c
  2796   00F6C0  51EA               	movf	234,w,b	;volatile
  2797   00F6C2  2403               	addwf	??_ADCC_GetSingleConversion^(0+1280),w,c
  2798   00F6C4  6E01               	movwf	?_ADCC_GetSingleConversion^(0+1280),c
  2799   00F6C6  0E00               	movlw	0
  2800   00F6C8  2004               	addwfc	(??_ADCC_GetSingleConversion+1)^(0+1280),w,c
  2801   00F6CA  6E02               	movwf	(?_ADCC_GetSingleConversion+1)^(0+1280),c
  2802   00F6CC                     
  2803                           ; BSR set to: 3
  2804   00F6CC  0012               	return		;funcret
  2805   00F6CE                     __end_of_ADCC_GetSingleConversion:
  2806                           	callstack 0
  2807                           
  2808 ;; *************** function _ADCC_DischargeSampleCapacitor *****************
  2809 ;; Defined at:
  2810 ;;		line 174 in file "mcc_generated_files/adcc.c"
  2811 ;; Parameters:    Size  Location     Type
  2812 ;;		None
  2813 ;; Auto vars:     Size  Location     Type
  2814 ;;		None
  2815 ;; Return value:  Size  Location     Type
  2816 ;;                  1    wreg      void 
  2817 ;; Registers used:
  2818 ;;		wreg, status,2
  2819 ;; Tracked objects:
  2820 ;;		On entry : 0/0
  2821 ;;		On exit  : 0/0
  2822 ;;		Unchanged: 0/0
  2823 ;; Data sizes:     COMRAM   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14  BANK15  BANK1
      +6  BANK17  BANK18  BANK19  BANK20  BANK21
  2824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2828 ;;Total ram usage:        0 bytes
  2829 ;; Hardware stack levels used: 1
  2830 ;; This function calls:
  2831 ;;		Nothing
  2832 ;; This function is called by:
  2833 ;;		_main
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836                           
  2837                           	psect	text18
  2838   00F5C4                     __ptext18:
  2839                           	callstack 0
  2840   00F5C4                     _ADCC_DischargeSampleCapacitor:
  2841                           	callstack 127
  2842   00F5C4                     
  2843                           ;mcc_generated_files/adcc.c: 177:     ADPCH = 0x3b;
  2844   00F5C4  0E3B               	movlw	59
  2845   00F5C6  0103               	movlb	3	; () banked
  2846   00F5C8  6FEC               	movwf	236,b	;volatile
  2847   00F5CA                     
  2848                           ; BSR set to: 3
  2849   00F5CA  0012               	return		;funcret
  2850   00F5CC                     __end_of_ADCC_DischargeSampleCapacitor:
  2851                           	callstack 0
  2852   000000                     
  2853                           	psect	rparam
  2854   000000                     
  2855                           	psect	idloc
  2856                           
  2857                           ;Config register IDLOC0 @ 0x200000
  2858                           ;	unspecified, using default values
  2859   200000                     	org	2097152
  2860   200000  0FFF               	dw	4095
  2861                           
  2862                           ;Config register IDLOC1 @ 0x200002
  2863                           ;	unspecified, using default values
  2864   200002                     	org	2097154
  2865   200002  0FFF               	dw	4095
  2866                           
  2867                           ;Config register IDLOC2 @ 0x200004
  2868                           ;	unspecified, using default values
  2869   200004                     	org	2097156
  2870   200004  0FFF               	dw	4095
  2871                           
  2872                           ;Config register IDLOC3 @ 0x200006
  2873                           ;	unspecified, using default values
  2874   200006                     	org	2097158
  2875   200006  0FFF               	dw	4095
  2876                           
  2877                           ;Config register IDLOC4 @ 0x200008
  2878                           ;	unspecified, using default values
  2879   200008                     	org	2097160
  2880   200008  0FFF               	dw	4095
  2881                           
  2882                           ;Config register IDLOC5 @ 0x20000A
  2883                           ;	unspecified, using default values
  2884   20000A                     	org	2097162
  2885   20000A  0FFF               	dw	4095
  2886                           
  2887                           ;Config register IDLOC6 @ 0x20000C
  2888                           ;	unspecified, using default values
  2889   20000C                     	org	2097164
  2890   20000C  0FFF               	dw	4095
  2891                           
  2892                           ;Config register IDLOC7 @ 0x20000E
  2893                           ;	unspecified, using default values
  2894   20000E                     	org	2097166
  2895   20000E  0FFF               	dw	4095
  2896                           
  2897                           ;Config register IDLOC8 @ 0x200010
  2898                           ;	unspecified, using default values
  2899   200010                     	org	2097168
  2900   200010  0FFF               	dw	4095
  2901                           
  2902                           ;Config register IDLOC9 @ 0x200012
  2903                           ;	unspecified, using default values
  2904   200012                     	org	2097170
  2905   200012  0FFF               	dw	4095
  2906                           
  2907                           ;Config register IDLOC10 @ 0x200014
  2908                           ;	unspecified, using default values
  2909   200014                     	org	2097172
  2910   200014  0FFF               	dw	4095
  2911                           
  2912                           ;Config register IDLOC11 @ 0x200016
  2913                           ;	unspecified, using default values
  2914   200016                     	org	2097174
  2915   200016  0FFF               	dw	4095
  2916                           
  2917                           ;Config register IDLOC12 @ 0x200018
  2918                           ;	unspecified, using default values
  2919   200018                     	org	2097176
  2920   200018  0FFF               	dw	4095
  2921                           
  2922                           ;Config register IDLOC13 @ 0x20001A
  2923                           ;	unspecified, using default values
  2924   20001A                     	org	2097178
  2925   20001A  0FFF               	dw	4095
  2926                           
  2927                           ;Config register IDLOC14 @ 0x20001C
  2928                           ;	unspecified, using default values
  2929   20001C                     	org	2097180
  2930   20001C  0FFF               	dw	4095
  2931                           
  2932                           ;Config register IDLOC15 @ 0x20001E
  2933                           ;	unspecified, using default values
  2934   20001E                     	org	2097182
  2935   20001E  0FFF               	dw	4095
  2936                           
  2937                           	psect	config
  2938                           
  2939                           ;Config register CONFIG1 @ 0x300000
  2940                           ;	External Oscillator Selection
  2941                           ;	FEXTOSC = OFF, Oscillator not enabled
  2942                           ;	Reset Oscillator Selection
  2943                           ;	RSTOSC = HFINTOSC_64MHZ, HFINTOSC with HFFRQ = 64 MHz and CDIV = 1:1
  2944   300000                     	org	3145728
  2945   300000  8C                 	db	140
  2946                           
  2947                           ;Config register CONFIG2 @ 0x300001
  2948                           ;	Clock out Enable bit
  2949                           ;	CLKOUTEN = OFF, CLKOUT function is disabled
  2950                           ;	PRLOCKED One-Way Set Enable bit
  2951                           ;	PR1WAY = ON, PRLOCKED bit can be cleared and set only once
  2952                           ;	Clock Switch Enable bit
  2953                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
  2954                           ;	Fail-Safe Clock Monitor Enable bit
  2955                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  2956                           ;	Fail-Safe Clock Monitor - Primary XTAL Enable bit
  2957                           ;	FCMENP = ON, Fail-Safe Clock Monitor enabled; timer will flag FSCMP bit and OSFIF inte
      +                          rrupt on EXTOSC failure.
  2958                           ;	Fail-Safe Clock Monitor - Secondary XTAL Enable bit
  2959                           ;	FCMENS = ON, Fail-Safe Clock Monitor enabled; timer will flag FSCMP bit and OSFIF inte
      +                          rrupt on SOSC failure.
  2960   300001                     	org	3145729
  2961   300001  FF                 	db	255
  2962                           
  2963                           ;Config register CONFIG3 @ 0x300002
  2964                           ;	MCLR Enable bit
  2965                           ;	MCLRE = EXTMCLR, If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR
  2966                           ;	Power-up timer selection bits
  2967                           ;	PWRTS = PWRT_OFF, PWRT is disabled
  2968                           ;	Multi-vector enable bit
  2969                           ;	MVECEN = OFF, Interrupt contoller does not use vector table to prioritze interrupts
  2970                           ;	IVTLOCK bit One-way set enable bit
  2971                           ;	IVT1WAY = ON, IVTLOCKED bit can be cleared and set only once
  2972                           ;	Low Power BOR Enable bit
  2973                           ;	LPBOREN = OFF, Low-Power BOR disabled
  2974                           ;	Brown-out Reset Enable bits
  2975                           ;	BOREN = SBORDIS, Brown-out Reset enabled , SBOREN bit is ignored
  2976   300002                     	org	3145730
  2977   300002  F7                 	db	247
  2978                           
  2979                           ;Config register CONFIG4 @ 0x300003
  2980                           ;	Brown-out Reset Voltage Selection bits
  2981                           ;	BORV = VBOR_1P9, Brown-out Reset Voltage (VBOR) set to 1.9V
  2982                           ;	ZCD Disable bit
  2983                           ;	ZCD = OFF, ZCD module is disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCD
      +                          CON
  2984                           ;	PPSLOCK bit One-Way Set Enable bit
  2985                           ;	PPS1WAY = ON, PPSLOCKED bit can be cleared and set only once; PPS registers remain loc
      +                          ked after one clear/set cycle
  2986                           ;	Stack Full/Underflow Reset Enable bit
  2987                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2988                           ;	Low Voltage Programming Enable bit
  2989                           ;	LVP = ON, Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE config
      +                          uration bit is ignored
  2990                           ;	Extended Instruction Set Enable bit
  2991                           ;	XINST = OFF, Extended Instruction Set and Indexed Addressing Mode disabled
  2992   300003                     	org	3145731
  2993   300003  FF                 	db	255
  2994                           
  2995                           ;Config register CONFIG5 @ 0x300004
  2996                           ;	WDT Period selection bits
  2997                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  2998                           ;	WDT operating mode
  2999                           ;	WDTE = OFF, WDT Disabled; SWDTEN is ignored
  3000   300004                     	org	3145732
  3001   300004  9F                 	db	159
  3002                           
  3003                           ;Config register CONFIG6 @ 0x300005
  3004                           ;	WDT Window Select bits
  3005                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
  3006                           ;	WDT input clock selector
  3007                           ;	WDTCCS = SC, Software Control
  3008   300005                     	org	3145733
  3009   300005  FF                 	db	255
  3010                           
  3011                           ;Config register CONFIG7 @ 0x300006
  3012                           ;	Boot Block Size selection bits
  3013                           ;	BBSIZE = BBSIZE_512, Boot Block size is 512 words
  3014                           ;	Boot Block enable bit
  3015                           ;	BBEN = OFF, Boot block disabled
  3016                           ;	Storage Area Flash enable bit
  3017                           ;	SAFEN = OFF, SAF disabled
  3018                           ;	Background Debugger
  3019                           ;	DEBUG = OFF, Background Debugger disabled
  3020   300006                     	org	3145734
  3021   300006  FF                 	db	255
  3022                           
  3023                           ;Config register CONFIG8 @ 0x300007
  3024                           ;	Boot Block Write Protection bit
  3025                           ;	WRTB = OFF, Boot Block not Write protected
  3026                           ;	Configuration Register Write Protection bit
  3027                           ;	WRTC = OFF, Configuration registers not Write protected
  3028                           ;	Data EEPROM Write Protection bit
  3029                           ;	WRTD = OFF, Data EEPROM not Write protected
  3030                           ;	SAF Write protection bit
  3031                           ;	WRTSAF = OFF, SAF not Write Protected
  3032                           ;	Application Block write protection bit
  3033                           ;	WRTAPP = OFF, Application Block not write protected
  3034   300007                     	org	3145735
  3035   300007  FF                 	db	255
  3036                           
  3037                           ;Config register CONFIG9 @ 0x300008
  3038                           ;	PFM and Data EEPROM Code Protection bit
  3039                           ;	CP = OFF, PFM and Data EEPROM code protection disabled
  3040   300008                     	org	3145736
  3041   300008  FF                 	db	255
  3042                           
  3043                           ; Padding undefined space
  3044   300009                     	org	3145737
  3045   300009  FF                 	db	255
  3046                           tosu	equ	0x4FF
  3047                           tosh	equ	0x4FE
  3048                           tosl	equ	0x4FD
  3049                           stkptr	equ	0x4FC
  3050                           pclatu	equ	0x4FB
  3051                           pclath	equ	0x4FA
  3052                           pcl	equ	0x4F9
  3053                           tblptru	equ	0x4F8
  3054                           tblptrh	equ	0x4F7
  3055                           tblptrl	equ	0x4F6
  3056                           tablat	equ	0x4F5
  3057                           prodh	equ	0x4F4
  3058                           prodl	equ	0x4F3
  3059                           indf0	equ	0x4EF
  3060                           postinc0	equ	0x4EE
  3061                           postdec0	equ	0x4ED
  3062                           preinc0	equ	0x4EC
  3063                           plusw0	equ	0x4EB
  3064                           fsr0h	equ	0x4EA
  3065                           fsr0l	equ	0x4E9
  3066                           wreg	equ	0x4E8
  3067                           indf1	equ	0x4E7
  3068                           postinc1	equ	0x4E6
  3069                           postdec1	equ	0x4E5
  3070                           preinc1	equ	0x4E4
  3071                           plusw1	equ	0x4E3
  3072                           fsr1h	equ	0x4E2
  3073                           fsr1l	equ	0x4E1
  3074                           bsr	equ	0x4E0
  3075                           indf2	equ	0x4DF
  3076                           postinc2	equ	0x4DE
  3077                           postdec2	equ	0x4DD
  3078                           preinc2	equ	0x4DC
  3079                           plusw2	equ	0x4DB
  3080                           fsr2h	equ	0x4DA
  3081                           fsr2l	equ	0x4D9
  3082                           status	equ	0x4D8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     79      83
    BANK5           160      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          256      0       0
    BANK16          256      0       0
    BANK17          256      0       0
    BANK18          256      0       0
    BANK19          256      0       0
    BANK20          256      0       0
    BANK21          254      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_map
    _map->___aldiv
    ___aldiv->___lmul
    _LED_WriteFull->___ltdiv
    _WS2812B_Write->_ws_send_byte

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                53    53      0    5910
                                             46 COMRAM    33    33      0
      _ADCC_DischargeSampleCapacitor
           _ADCC_GetSingleConversion
                    _DATAEE_ReadByte
                      _LED_WriteFull
                     _LOOPDELAY_Init
                  _SYSTEM_Initialize
                                _map
 ---------------------------------------------------------------------------------
 (1) _map                                                 20     0     20    2496
                                             26 COMRAM    20     0     20
           _ADCC_GetSingleConversion (ARG)
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     370
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                             12 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                    _ADCC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LOOPDELAY_Init                                       2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _LED_WriteFull                                       10     5      5    1038
                                             10 COMRAM    10     5      5
                      _WS2812B_Write
                            ___ltdiv
 ---------------------------------------------------------------------------------
 (2) ___ltdiv                                             10     4      6     314
                                              0 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _WS2812B_Write                                        3     1      2     338
                                              1 COMRAM     3     1      2
                       _ws_send_byte
 ---------------------------------------------------------------------------------
 (3) _ws_send_byte                                         1     1      0     120
                                              0 COMRAM     1     1      0
                           _onePulse
                          _zeroPulse
 ---------------------------------------------------------------------------------
 (4) _zeroPulse                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _onePulse                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DATAEE_ReadByte                                      2     0      2    2020
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ADCC_GetSingleConversion                             5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADCC_DischargeSampleCapacitor                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCC_DischargeSampleCapacitor
   _ADCC_GetSingleConversion
   _DATAEE_ReadByte
   _LED_WriteFull
     _WS2812B_Write
       _ws_send_byte
         _onePulse
         _zeroPulse
     ___ltdiv
   _LOOPDELAY_Init
   _SYSTEM_Initialize
     _ADCC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
   _map
     _ADCC_GetSingleConversion (ARG)
     ___aldiv (ARG)
       ___lmul (ARG)
     ___lmul (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAMl            FFF      0       0      40        0.0%
EEDATA             400      0       0       0        0.0%
BITBIGSFRlllllh    325      0       0      52        0.0%
BITBANK20          100      0       0      35        0.0%
BANK20             100      0       0      36        0.0%
BITBANK19          100      0       0      33        0.0%
BANK19             100      0       0      34        0.0%
BITBANK18          100      0       0      31        0.0%
BANK18             100      0       0      32        0.0%
BITBANK17          100      0       0      29        0.0%
BANK17             100      0       0      30        0.0%
BITBANK16          100      0       0      27        0.0%
BANK16             100      0       0      28        0.0%
BITBANK15          100      0       0      25        0.0%
BANK15             100      0       0      26        0.0%
BITBANK14          100      0       0      23        0.0%
BANK14             100      0       0      24        0.0%
BITBANK13          100      0       0      21        0.0%
BANK13             100      0       0      22        0.0%
BITBANK12          100      0       0      19        0.0%
BANK12             100      0       0      20        0.0%
BITBANK11          100      0       0      16        0.0%
BANK11             100      0       0      17        0.0%
BITBANK10          100      0       0      14        0.0%
BANK10             100      0       0      15        0.0%
BITBANK9           100      0       0      12        0.0%
BANK9              100      0       0      13        0.0%
BITBANK8           100      0       0      10        0.0%
BANK8              100      0       0      11        0.0%
BITBANK7           100      0       0       8        0.0%
BANK7              100      0       0       9        0.0%
BITBANK6           100      0       0       6        0.0%
BANK6              100      0       0       7        0.0%
BIGRAMh             FE      0       0      39        0.0%
BITBANK21           FE      0       0      37        0.0%
BANK21              FE      0       0      38        0.0%
BITBANK5            A0      0       0       4        0.0%
BANK5               A0      0       0       5        0.0%
BITBIGSFRlhl        9E      0       0      47        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4F      53       1       87.4%
BITBIGSFRllllll     43      0       0      55        0.0%
BITBIGSFRllllll     40      0       0      57        0.0%
BITBIGSFRhhlh       1E      0       0      42        0.0%
BITBIGSFRllllll     1C      0       0      56        0.0%
BITBIGSFRlhh         A      0       0      46        0.0%
BITBIGSFRhhh         7      0       0      41        0.0%
BITBIGSFRhhllh       5      0       0      43        0.0%
BITBIGSFRllllhh      5      0       0      50        0.0%
BITBIGSFRhhllll      5      0       0      44        0.0%
BITBIGSFRhl          5      0       0      45        0.0%
BITBIGSFRlllh        3      0       0      49        0.0%
BITBIGSFRllh         3      0       0      48        0.0%
BITBIGSFRlllllh      1      0       0      53        0.0%
BITBIGSFRlllllh      1      0       0      54        0.0%
BITBIGSFRllllhh      1      0       0      51        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      53      18        0.0%
DATA                 0      0      53       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Jul 01 18:06:23 2023

                                   l45 F720                                     u10 F978  
                                   u11 F974                                     u20 F992  
                                   u21 F98E                                     u30 F9AC  
                                   u31 F9A8                                     u40 F9C6  
                                   u41 F9C2                                     u50 F9E0  
                                   u51 F9DC                                     u60 F9FA  
                                   u61 F9F6                                     u70 FA14  
                                   u71 FA10                                     u80 FA2E  
                                   u81 FA2A                                    l142 F6CC  
                                  l151 F5CA                                    l127 F77C  
                                  l321 F622                                    l139 F6AC  
                                  l243 F5F4                                    l421 F81E  
                                  l246 F63E                                    l415 FA3A  
                                  l423 F860                                    l440 F5D4  
                                  l249 F65A                                    l522 FB46  
                                  l355 FBEE                                    l356 FC40  
                                  l357 FC92                                    l454 F7D6  
                                  l390 F8DA                                    l358 FCE4  
                                  l455 F7E6                                    l393 F678  
                                  l387 F60A                                    l396 F69C  
                                  l914 F94C                                    l916 F966  
                                  l909 F95A                                    u600 F8FC  
                                  u520 F79C                                    u601 F8F8  
                                  u521 F798                                    u610 F91C  
                                  u530 F7D6                                    u611 F918  
                                  u531 F7D2                                    u620 F93E  
                                  u540 FA4E                                    u700 FD00  
                                  u621 F93A                                    u541 FA4A  
                                  u701 FCFC                                    u630 F6BA  
                                  u550 FA70                                    u710 FD1E  
                                  u631 F6B6                                    u551 FA6C  
                                  u711 FD1A                                    u640 F81E  
                                  u560 FAAA                                    u800 FE12  
                                  u720 FD3A                                    u641 F81A  
                                  u561 FAA6                                    u801 FE0E  
                                  u721 FD36                                    u650 F860  
                                  u570 FACC                                    u810 FE2E  
                                  u730 FD58                                    u651 F85C  
                                  u571 FAC8                                    u811 FE2A  
                                  u731 FD54                                    u580 FAF4  
                                  u820 FE4E                                    u740 FD6E  
                                  u660 FBB8                                    u581 FAF0  
                                  u821 FE4A                                    u741 FD6A  
                                  u661 FBB4                                    u590 FB26  
                                  u750 FD8A                                    u670 FC0A  
                                  u591 FB22                                    u751 FD86  
                                  u671 FC06                                    u760 FDAA  
                                  u680 FC5C                                    u761 FDA6  
                                  u681 FC58                                    u770 FDC0  
                                  u690 FCAE                                    u771 FDBC  
                                  u691 FCAA                                    u780 FDDC  
                                  u781 FDD8                                    u837 FD3E  
                                  u790 FDFC                                    u791 FDF8  
                                  u847 FD8E                                    u857 FDE0  
                                  u867 FE32                         WS2812B_Write@B 0503  
                       WS2812B_Write@G 0502                         WS2812B_Write@R 0504  
                                  _map F862                                    wreg 0004E8  
                          main@blueAdj 054A                                   l1120 F96A  
                                 l1130 F99A                                   l1122 F978  
                                 l1116 F65C                                   l1140 F9C6  
                                 l1132 F99E                                   l1124 F980  
                                 l1118 F67A                                   l1150 F9EC  
                                 l1142 F9CE                                   l1134 F9AC  
                                 l1126 F984                                   l1160 FA1C  
                                 l1152 F9FA                                   l1144 F9D2  
                                 l1136 F9B4                                   l1128 F992  
                                 l1162 FA20                                   l1154 FA02  
                                 l1146 F9E0                                   l1138 F9B8  
                                 l1170 F714                                   l1164 FA2E  
                                 l1156 FA06                                   l1148 F9E8  
                                 l1172 F71E                                   l1166 FA36  
                                 l1158 FA14                                   l1174 F722  
                                 l1270 F5E4                                   l1168 F6CE  
                                 l1176 F640                                   l1178 F624  
                                 l1268 F5C4                                   l1700 FA5E  
                                 l1710 FA94                                   l1702 FA62  
                                 l1720 FAD6                                   l1712 FAAA  
                                 l1704 FA70                                   l1800 FB48  
                                 l1722 FAF4                                   l1714 FAB2  
                                 l1730 FB16                                   l1706 FA80  
                                 l1810 FB4C                                   l1802 FB4C  
      ??_ADCC_DischargeSampleCapacitor 0501                                   l1740 F8E8  
                                 l1732 FB26                                   l1724 FB04  
                                 l1716 FABE                                   l1708 FA84  
                                 l1900 FD8C                                   l1820 FB4C  
                                 l1812 FB4C                                   l1804 FB4C  
                                 l1750 F924                                   l1742 F8FC  
                                 l1734 FB36                                   l1726 FB06  
                                 l1718 FACC                                   l1910 FDDC  
                                 l1902 FD98                                   l1830 FB4C  
                                 l1822 FB4C                                   l1814 FB4C  
                                 l1806 FB4C                                   l1760 F6A4  
                                 l1752 F93E                                   l1744 F904  
                                 l1728 FB10                                   l1920 FE12  
                                 l1912 FDDE                                   l1904 FDAA  
                                 l1840 FB4C                                   l1832 FB4C  
                                 l1824 FB4C                                   l1816 FB4C  
                                 l1808 FB4C                                   l1762 F6A8  
                                 l1770 F60C                                   l1682 F5F8  
                                 l1754 F94A                                   l1746 F90E  
                                 l1738 F8DC                                   l1690 F7AC  
                                 l1922 FE2E                                   l1914 FDEA  
                                 l1906 FDAE                                   l1930 FE52  
                                 l1850 FB68                                   l1842 FB50  
                                 l1834 FB4C                                   l1826 FB4C  
                                 l1818 FB4C                                   l1764 F6AA  
                                 l1772 F616                                   l1756 F954  
                                 l1748 F91C                                   l1692 F7B6  
                                 l1684 F77E                                   l1780 F862  
                                 l1940 FE66                                   l1932 FE5E  
                                 l1924 FE30                                   l1916 FDFC  
                                 l1908 FDC0                                   l1860 FB8C  
                                 l1852 FB70                                   l1844 FB54  
                                 l1836 FB4C                                   l1828 FB4C  
                                 l1766 F6BA                                   l1758 F6A0  
                                 l1774 F61E                                   l1694 FA3C  
                                 l1686 F78E                                   l1950 FF26  
                                 l1942 FE6A                                   l1934 FE60  
                                 l1926 FE3C                                   l1918 FE00  
                                 l1870 FB98                                   l1862 FB90  
                                 l1854 FB78                                   l1846 FB58  
                                 l1838 FB4C                                   l1792 F7FE  
                                 l1784 F7EA                                   l1696 FA40  
                                 l1688 F79C                                   l1952 FF80  
                                 l1944 FEC4                                   l1936 FE62  
                                 l1928 FE4E                                   l1880 FD00  
                                 l1872 FBB8                                   l1864 FB92  
                                 l1856 FB80                                   l1848 FB60  
                                 l1794 F80C                                   l1786 F7FA  
                                 l1778 F5CC                                   l1698 FA4E  
                                 l1954 FF84                                   l1946 FEC8  
                                 l1938 FE64                                   l1890 FD48  
                                 l1882 FD0E                                   l1874 FC0A  
                                 l1866 FB94                                   l1858 FB88  
                                 l1796 F80E                                   l1956 FFDA  
                                 l1948 FF22                                   l1892 FD58  
                                 l1884 FD1E                                   l1876 FC5C  
                                 l1868 FB96                                   l1798 F82A  
                                 l1894 FD5C                                   l1886 FD3A  
                                 l1878 FCAE                                   ?_map 051B  
                                 l1896 FD6E                                   l1888 FD3C  
                                 l1898 FD8A                                   _LATA 0004BE  
                                 _LATB 0004BF                                   _LATC 0004C0  
                                 _PMD0 000063                                   _PMD1 000064  
                                 _PMD2 000065                                   _PMD3 000066  
                                 _PMD4 000067                                   _PMD5 000068  
                                 _WPUA 000401                                   _WPUB 000409  
                                 _WPUC 000411                                   _main FB48  
                                 map@x 051B                                   start FFFC  
                main@timeout5sPressed1 0531                  main@timeout5sPressed2 0533  
                main@timeout5sPressed3 0535                  main@timeout5sPressed4 0537  
                         ___param_bank 000000                                  ??_map 052F  
                       LED_WriteFull@i 0514                         LED_WriteFull@x 0511  
        __end_of_OSCILLATOR_Initialize F640                        __end_of___aldiv FB48  
                                _ADACT 0003F9                                  _ADCAP 0003F0  
                                ?_main 0501                                  _ADCLK 0003FA  
                                _ADCNT 0003E6                                  _ADPCH 0003EC  
                                _ADREF 0003F8                                  _ADRPT 0003E7  
                      __end_of___ltdiv F968                                  _OSCEN 0000B3  
                         main@redMode1 053E                           main@redMode2 0541  
                         main@redMode3 0544                           main@redMode4 0547  
                                _TRISA 0004C6                                  _TRISB 0004C7  
                                _TRISC 0004C8            LOOPDELAY_Init@newLoopTimeMS 0501  
                  ___lmul@multiplicand 0505                        _DATAEE_ReadByte F60C  
                         main@whiteAdj 054B                                  status 0004D8  
                      __initialization F5D6                          _LED_WriteFull F7E8  
                         _ws_send_byte F968                           __end_of_main FFFC  
                               ??_main 052F                          main@blueMode1 0540  
                        main@blueMode2 0543                          main@blueMode3 0546  
                        main@blueMode4 0549                          __activetblptr 000000  
                               _ADACCH 0003E4                                 _ADACCL 0003E3  
                               _ADACCU 0003E5                                 _ADACQH 0003EF  
                               _ADACQL 0003EE                                 _ADCON0 0003F3  
                               _ADCON1 0003F4                                 _ADCON2 0003F5  
                               _ADCON3 0003F6                                 _ADERRH 0003DE  
                               _ADERRL 0003DD                                 _ACTCON 0000AC  
                               _ADLTHH 0003DA                                 _ADLTHL 0003D9  
                               _ADRESH 0003EB                                 _ADRESL 0003EA  
                               _ADPREH 0003F2                                 _ADPREL 0003F1  
                               _ADSTAT 0003F7                                 _ADUTHH 0003DC  
                               _ADUTHL 0003DB                                 _ANSELA 000400  
                               _ANSELB 000408                                 _ANSELC 000410  
                               _ODCONA 000402                                 _ODCONB 00040A  
                               _ODCONC 000412                                 _INLVLA 000404  
                               _INLVLB 00040C                                 _INLVLC 000414  
                               _TABLAT 0004F5                                 _OSCFRQ 0000B1  
__end_of_ADCC_DischargeSampleCapacitor F5CC          _ADCC_DischargeSampleCapacitor F5C4  
                       ?_LED_WriteFull 050B                                 ___lmul F77E  
                            ??___aldiv 0515                              ??___ltdiv 0507  
                               isa$std 000001                       __end_of_onePulse F67A  
              __end_of_DATAEE_ReadByte F624                        _ADCC_Initialize F722  
                       _PMD_Initialize F640                          main@timeout5s 052F  
            ?_ADCC_GetSingleConversion 0501                     LED_WriteFull@green 050B  
                    _SYSTEM_Initialize F5E4                             __accesstop 0560  
              __end_of__initialization F5DE                     ?_SYSTEM_Initialize 0501  
                        ___rparam_used 000001                         __pcstackCOMRAM 0501  
                  ??_SYSTEM_Initialize 0501                 __end_of_PMD_Initialize F65C  
            __end_of_SYSTEM_Initialize F5F6                       LED_WriteFull@red 0510  
                      ??_LED_WriteFull 0510         ?_ADCC_DischargeSampleCapacitor 0501  
                              ?___lmul 0501                __end_of_ADCC_Initialize F77E  
                              _ADFLTRH 0003E2                                _ADFLTRL 0003E1  
                       ___lmul@product 0509                                _ADPREVH 0003E9  
                              _ADPREVL 0003E8                                _ADSTPTH 0003E0  
                              _ADSTPTL 0003DF                        ?_PMD_Initialize 0501  
                       main@greenMode1 053F                         main@greenMode2 0542  
                       main@greenMode3 0545                         main@greenMode4 0548  
                     ?_DATAEE_ReadByte 0501                                _OSCCON1 0000AD  
                              _OSCCON3 0000AF                                _TBLPTRH 0004F7  
                              _TBLPTRL 0004F6                                _TBLPTRU 0004F8  
                              _NVMADRH 000044                                _NVMADRL 000043  
                              _NVMADRU 000045                                _OSCTUNE 0000B0  
                              _NVMDATL 000046                                _NVMLOCK 000042  
                              _SLRCONA 000403                                _SLRCONB 00040B  
                              _SLRCONC 000413                          _WS2812B_Write F5F6  
                            ?_onePulse 0501                                __Hparam 0000  
                              __Lparam 0000                                ___aldiv FA3C  
                              ___ltdiv F8DC                                __pcinit F5D6  
                              __ramtop 1600                                __ptext0 FB48  
                              __ptext1 F862                                __ptext2 F77E  
                              __ptext3 FA3C                                __ptext4 F5E4  
                              __ptext5 F640                                __ptext6 F6CE  
                              __ptext7 F624                                __ptext8 F722  
                              __ptext9 F5CC                  _OSCILLATOR_Initialize F624  
                     ___aldiv@dividend 050D               ??_PIN_MANAGER_Initialize 0501  
                       ?_WS2812B_Write 0502                                main@red 053B  
                 end_of_initialization F5DE                             _loopTimeMS 0550  
                       main@timeout10s 0539                             ??_onePulse 0501  
                     ___ltdiv@dividend 0501                       ___aldiv@quotient 0517  
                     ?_ADCC_Initialize 0501       __end_of_ADCC_GetSingleConversion F6CE  
                    __end_of_zeroPulse F69E                              _PORTAbits 0004CE  
                            _PORTBbits 0004CF                              _PORTCbits 0004D0  
                     ___ltdiv@quotient 0507                             map@out_max 052B  
                           map@out_min 0527                         __end_of___lmul F7E8  
               ?_OSCILLATOR_Initialize 0501                        ??_WS2812B_Write 0504  
                  start_initialization F5D6                            __end_of_map F8DC  
                  DATAEE_ReadByte@bAdd 0501                         _LOOPDELAY_Init F5CC  
                     ??_PMD_Initialize 0501                               ??___lmul 0509  
                    LED_WriteFull@blue 050C               _ADCC_GetSingleConversion F69E  
                          __pbssCOMRAM 0550                 __end_of_LOOPDELAY_Init F5D6  
                __end_of_LED_WriteFull F862                 _PIN_MANAGER_Initialize F6CE  
                        ?_ws_send_byte 0501                               ?___aldiv 050D  
      ADCC_GetSingleConversion@channel 0505                               ?___ltdiv 0501  
                            _bufferRAM 001500                        ___aldiv@divisor 0511  
                      ___aldiv@counter 0515                        ?_LOOPDELAY_Init 0501  
                             _LATAbits 0004BE                               _LATBbits 0004BF  
                             _LATCbits 0004C0                         ??_ws_send_byte 0501  
                             _PIR0bits 0004B3                        ___ltdiv@divisor 0504  
                      ___ltdiv@counter 050A                              map@in_max 0523  
                            map@in_min 051F                             _ADCON0bits 0003F3  
                           _ADCON1bits 0003F4                             _ADCON2bits 0003F5  
                           _ADCON3bits 0003F6                              main@green 053C  
                            _zeroPulse F67A                              main@state 054F  
                          _INTCON0bits 0004D6                      ___lmul@multiplier 0501  
                           _ADSTATbits 0003F7                               __Hrparam 0000  
                             __Lrparam 0000                       main@timeout100ms 054C  
                     main@timeout250ms 054E                       main@timeout500ms 054D  
                        ws_send_byte@K 0501                ??_OSCILLATOR_Initialize 0501  
                           ?_zeroPulse 0501                               __ptext10 F7E8  
                             __ptext11 F8DC                               __ptext12 F5F6  
                             __ptext13 F968                               __ptext14 F67A  
                             __ptext15 F65C                               __ptext16 F60C  
                             __ptext17 F69E                               __ptext18 F5C4  
                             _onePulse F65C                      ??_DATAEE_ReadByte 0503  
                             isa$xinst 000000             ??_ADCC_GetSingleConversion 0503  
                             main@blue 053D                            _loopTimeCnt 0552  
                          _NVMCON0bits 000040                            _NVMCON1bits 000041  
                 __end_of_ws_send_byte FA3C                  __end_of_WS2812B_Write F60C  
              ?_PIN_MANAGER_Initialize 0501                  LED_WriteFull@ledcount 050D  
                          ??_zeroPulse 0501                           ___aldiv@sign 0516  
                     ??_LOOPDELAY_Init 0503         __end_of_PIN_MANAGER_Initialize F722  
                    ??_ADCC_Initialize 0501  
